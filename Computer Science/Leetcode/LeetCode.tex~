% Created 2019-12-16 Mon 21:34
% Intended LaTeX compiler: pdflatex
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\usepackage{minted}
\usepackage[margin=1in] {geometry}
\usepackage{parskip}
\setlength\parindent{0pt}
\linespread {1.0}
\setcounter{tocdepth} {3}
\setcounter{secnumdepth} {3}
\usepackage{fontspec}
\usepackage{fancyvrb}
\setmonofont{Droid Sans Mono}[SizeFeatures={Size=10}]
\date{\today}
\title{}
\hypersetup{
 pdfauthor={},
 pdftitle={},
 pdfkeywords={},
 pdfsubject={},
 pdfcreator={Emacs 26.2 (Org mode 9.2.3)}, 
 pdflang={English}}
\begin{document}

\tableofcontents

\begin{minted}[breaklines=true,breakanywhere=true,frame=single,framesep=10pt]{c++}
class Solution {
public:

  int rangeSumBST(TreeNode* root, int L, int R) {
    if (root == nullptr)
      return 0;

    int sum = 0;

    // use a set to keep track of visited nodes 
    unordered_set<TreeNode*> visited_nodes;
    // use a stack to do DFS
    stack<TreeNode*> nodes;
    nodes.push(root);

    while (!nodes.empty()) {
      // check if top node is leaf or not
      if (nodes.top()->left == nodes.top()->right) {
	if (nodes.top()->val >= L && nodes.top()->val <= R) {
	  sum += nodes.top()->val;
	  nodes.pop();
	  continue;
	}
      }

      // check if nodes.top() has unvisited child (first check left, then right)
      // if so, push it into the stack 
      // otherwise, calculate sum 
      if (nodes.top()->left != nullptr && visited_nodes.find(nodes.top()->left) == visited_nodes.end()) {
	visited_nodes.insert(nodes.top()->left);  // mark as visited 
	nodes.push(nodes.top()->left);
	continue;
      }

      if (nodes.top()->right != nullptr && visited_nodes.find(nodes.top()->right) == visited_nodes.end()) {
	visited_nodes.insert(nodes.top()->right);
	nodes.push(nodes.top()->right);
	continue;
      }

      // up to here, both child of the nodes.top() node has been visited
      // add to sum if nodes.top()->val satisfies the condition 
      if (nodes.top()->val >= L && nodes.top()->val <= R)
	sum += nodes.top()->val;

      nodes.pop();
    }

    return sum;

  }
};
\end{minted}
\end{document}
