% Created 2019-08-18 Sun 12:20
% Intended LaTeX compiler: pdflatex
\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\usepackage{minted}
\usepackage[margin=1in] {geometry}
\usepackage{parskip}
\setlength\parindent{0pt}
\linespread {1.0}
\setcounter{tocdepth} {3}
\setcounter{secnumdepth} {3}
\date{\today}
\title{}
\hypersetup{
 pdfauthor={},
 pdftitle={},
 pdfkeywords={},
 pdfsubject={},
 pdfcreator={Emacs 26.2 (Org mode 9.2.3)}, 
 pdflang={English}}
\begin{document}

\tableofcontents


\section{0. Template \label{org6860bf9}}
\label{sec:org9355313}
\subsection{Problem Statement}
\label{sec:orgc71af81}
[[][]]
\subsection{Analysis}
\label{sec:org888d74d}

\subsection{Solution}
\label{sec:orgdb33054}

\subsection{todos [0/4]}
\label{sec:org6baa724}
\begin{itemize}
\item[{$\square$}] write down your own solution and analysis
\item[{$\square$}] time complexity analysis of your own solution
\item[{$\square$}] check solution/discussion page for more ideas, implement them, and write down corresponding analysis (including time and space complexity analysis
\item[{$\square$}] generalize this problem
\end{itemize}
\section{1. Two Sum \label{org496fe93}}
\label{sec:org2d99600}
\subsection{Problem Statement}
\label{sec:org1b3a350}
\href{https://leetcode.com/problems/two-sum/}{Link}
\subsection{Analysis}
\label{sec:org08f74ac}
\subsubsection{\(O(N^2)\) method (brutal force)}
\label{sec:orgd92930c}
Each input would have exactly one solution, and no same element can be used twice. We can go through the array. For each element we encountered (\texttt{nums[i]}), we calculate the counter part (the number that is needed so \texttt{nums[i] + counter\_part = target}): simply: \texttt{target - nums[i]}. Then we go through the rest of the array to find out if such element exist. We go from \texttt{i + 1} to the end. We don't have to go from the beginning because if there is such an element, we would find it earlier. If no such element found, we continue to the next element, calculate its counter part and search again.

The time complexity is: \(N + (N - 1) + (N - 2) + \cdots + 2 + 1\). Which is \(\frac{N(N - 1)}{2}\), so the time complexity is \(O(N^2)\).
\subsubsection{Sort a copy of the array}
\label{sec:orgcfdf018}
In the above solution, we use linear search to find out if the counter\_part is in the array or not. If we have an ordered version of the array, we can use binary search to finish this task. It's time complexity is \(O(\log{N})\). This method requires extra space to hold the sorted version of the array. After we get the sorted version (you can use \texttt{std::sort()} to finish this job), we have two ways to get the index:
\begin{enumerate}
\item we start from the beginning of the original array, for each encountered element, we calculate the counterpart of it. Then we search this counterpart in sorted array (using binary search). If we found an counterpart, we traverse the original array to find out the index of this counterpart. If the index is the same as the index of the current element, it means we used the same element, which can not be considered as a solution. Otherwise, we have found the indexes.
\item we start from the beginning of the sorted array. For each encountered element, we calculate the corresponding counterpart. Then we search the sorted array, from the next element to the end. This is because the counterpart can not appear before the current element, otherwise, the previous element will search to the current element. If we found a counterpart exists, we will traverse the original array to find out the index of the two elements.
\end{enumerate}

\subsection{Solution}
\label{sec:org4a3d674}
\subsubsection{C++}
\label{sec:org7baaf53}
\paragraph{\(O(N^2)\) Time (35.43\%)}
\label{sec:org9edd4df}
Idea: traverse the vector. For each encountered value, calculate the corresponding value it needs to add up to the target value. And then traverse the vector to look for this value.

The time complexity is \(O(N^2)\), because for each value in the vector, you'll go through the vector and search its corresponding part so they add up to the target. This is linear searching, which has \(O(N)\) complexity.
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  vector<int> twoSum(vector<int>& nums, int target) {
    for (auto i = nums.begin(); i != nums.end(); ++i) {
      int other_part = target - (*i);
      auto itr = find(nums.begin(), nums.end(), other_part);

      if (itr != nums.end() && itr != i)
	return {static_cast<int>(i - nums.begin()), static_cast<int>(itr - nums.begin())};
    }

    return {0, 1};
  }
};
\end{minted}
\paragraph{\(O(N^2)\) modified}
\label{sec:org0d4d293}
This is modified implementation. Although the algorithm is the same as the first \(O(N^2)\) solution. This solution is much clearer.
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
/*test cases: 
[2,7,11,15]
9

[2,3]
5

[1,113,2,7,9,23,145,11,15]
154

[2,7,11,15,1,8,13]
3
*/


class Solution {
public:
  vector<int> twoSum(vector<int>& nums, int target) {
    int index_1 = -1;
    int index_2 = -1;

    for (int i = 0; i < nums.size(); i++) {
      int other_part = target - nums[i];

      for (int j = i + 1; j < nums.size(); j++) {
	if (nums[j] == other_part) {
	  index_1 = i;
	  index_2 = j;
	  break;
	}
      }

      if (index_1 != -1)
	break;
    }

    return {index_1, index_2};
  }
};
\end{minted}
\paragraph{\(O(N\log{N})\) Time (8 ms)}
\label{sec:org65387d0}
Idea: the searching part is optimized. First we sort the vector. In order to keep the original relative order of each element, we sort a vector of iterators that referring each element in the original vector \texttt{nums}. Then, we can use this sorted vector to perform binary search, whose time complexity is \(\log{N}\). The total time complexity is reduced to \(O(N\log{N})\).

I made some bugs when writting this code, because I didn't realize the following assumption:
\begin{itemize}
\item duplicates allowed
\item each input would have \textbf{\emph{exactly}} one solution
\end{itemize}

Code:
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  /*Notes: 
    The compare object used to sort vector of iterators
  */
  struct Compare {
    bool operator()(vector<int>::iterator a, vector<int>::iterator b) {
      return (*a < *b);      
    }

  };

  /*Notes: 
    A binary search to find target value in a vector of iterators;
    if found: return the index value of that iterator 
    if not found: return -1
  */
  int findTarget(int target, const vector<vector<int>::iterator>& itr_vector, const vector<int>::iterator& current_itr) {
    int start_index = 0;
    int end_index = itr_vector.size() - 1;
    int middle;
    int result = -1;

    while (start_index <= end_index) {
      // update middle 
      middle = (start_index + end_index) / 2;
      // check value 
      if (*itr_vector[middle] == target) {
	if (itr_vector[middle] == current_itr) {
	  start_index += 1;
	  end_index += 1;
	  continue;
	}

	result = middle;
	break;
      }

      else if (*itr_vector[middle] > target) {
	end_index = middle - 1;
	continue;
      }

      else if (*itr_vector[middle] < target) {
	start_index = middle + 1;
	continue;
      }

    }

    return result;
  }


  vector<int> twoSum(vector<int>& nums, int target) {
    // create a vector of iterators
    vector<vector<int>::iterator> itr_vector;
    for (auto i = nums.begin(); i != nums.end(); ++i)
      itr_vector.push_back(i);

    // sort the vector of iterators, so the values these iterators referred to 
    // are in ascending order
    sort(itr_vector.begin(), itr_vector.end(), Compare());

    // go over nums, and find the pair
    for (auto i = nums.begin(); i != nums.end() - 1; ++i) {
      int other_part = target - (*i);
      int other_part_index = findTarget(other_part, itr_vector, i);

      if (other_part_index != -1) // found
	return {static_cast<int>(i - nums.begin()), static_cast<int>(itr_vector[other_part_index] - nums.begin())};
    }

    // for syntax
    return {0, 1};

  }
};
\end{minted}
\paragraph{sort a copy of the array (way 1, 8 ms)}
\label{sec:orgf2718dd}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int binarySearch(const vector<int>& copy, int num) {
    int middle;
    int begin = 0;
    int end = copy.size() - 1;

    while (begin <= end) {
      middle = (begin + end) / 2;

      if (copy[middle] == num)
	return middle;

      if (copy[middle] > num) {
	end = middle - 1;
	continue;
      }

      if (copy[middle] < num) {
	begin = middle + 1;
	continue;
      }
    }

    return -1;
  }

  vector<int> twoSum(vector<int>& nums, int target) {   
    vector<int> copy = nums;
    sort(copy.begin(), copy.end());
    int counter_part;
    int first_index;
    int second_index;
    int index;

    for (int i = 0; i < nums.size(); i++) {
      counter_part = target - nums[i];
      index = binarySearch(copy, counter_part);
      if (index != -1) {

	for (int j = 0; j < nums.size(); j++)
	  if (nums[j] == copy[index]) {
	    second_index = j;
	    break;
	  }

	if (i != second_index) {
	  first_index = i;
	  break;
	}

      }  
    }

    return {first_index, second_index};
  }
};
\end{minted}
\paragraph{sort a copy of the array (way 2, 4 ms)}
\label{sec:org4976dd9}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int binarySearch(int target, int index, vector<int> copy) {
    int start_index = index;
    int end_index = copy.size() - 1;
    int middle;

    while (start_index <= end_index) {
      middle = (start_index + end_index) / 2;

      if (copy[middle] == target)
	return middle;

      else if (copy[middle] < target)
	start_index = middle + 1;

      else
	end_index = middle - 1;
    }

    return -1;
  }


  vector<int> twoSum(vector<int>& nums, int target) {
    vector<int> copy = nums;
    sort(copy.begin(), copy.end());

    int index_1 = -1;
    int index_2 = -1;

    for (int i = 0; i < copy.size(); i++) {
      int counter_part = target - copy[i];
      int counter_part_index = binarySearch(counter_part, i + 1, copy);

      if (counter_part_index != -1) { // match found, now try to find the actual index of the two values
	int index = 0;

	while (index_1 == -1 || index_2 == -1) {
	  if (index_1 == -1 && nums[index] == copy[i])
	    index_1 = index;

	  else if (index_2 == -1 && nums[index] == copy[counter_part_index])
	    index_2 = index;

	  index++;
	}     

	break;
      }
    }

    if (index_1 > index_2)
      return {index_2, index_1};
    else
      return {index_1, index_2};
  }
};
\end{minted}
\subsection{todos [2/4]}
\label{sec:org26fd234}
\begin{itemize}
\item[{$\boxtimes$}] try sort directly method (using a copy array)
\item[{$\boxtimes$}] write down my own analysis: sort copy array and iter\_array
\item[{$\square$}] check the solution and understands, implement each idea
\begin{itemize}
\item[{$\square$}] two pass hash table
\item[{$\square$}] one pass hash table
\item[{$\square$}] write the analysis of each idea
\end{itemize}
\item[{$\square$}] generalize this problem
\end{itemize}
\section{27. Remove Element \label{org2164582}}
\label{sec:orgb061920}
\subsection{Problem Statement}
\label{sec:org0ad5156}
\href{https://leetcode.com/problems/remove-element/}{Link}
\subsection{Analysis}
\label{sec:org9c12ea3}
\subsubsection{Two pointers}
\label{sec:org102370b}
Idea is similar with \hyperref[org61bcc61]{283. Move Zeros}. Using two pointers (iterators): \texttt{a} and \texttt{b}. Use iterator \texttt{a} to scan through the array. If target encountered, use the iterator \texttt{b} to scan element starting from next element. If the iterator \texttt{b} find non-target element, swap elements pointed by iterator \texttt{a} and \texttt{b}. If \texttt{b} didn't find any non-target element, it means there is none in the remaining part of the array. We can return.

Another thing should be kept is the number of non-target element we encountered during the iteration. This is the length of the sub-array that we should return. We update this number each time we encounter a non-target element or we swap a target and a non-target element.

\subsection{Solution}
\label{sec:org6d396d2}
\subsubsection{C++}
\label{sec:org56b897c}
\paragraph{two pointers}
\label{sec:org69b0ebd}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int removeElement(vector<int>& nums, int val) {
    int length = 0;
    auto itr_b = nums.begin();

    for (auto itr_a = nums.begin(); itr_a != nums.end(); ++itr_a) {
      if (*itr_a != val) {
	length++;
	continue;
      }

      // target encountered
      auto itr_b = itr_a + 1;
      while (itr_b != nums.end() && *itr_b == val)
	++itr_b;

      if (itr_b == nums.end())
	return length;

      swap(*itr_a, *itr_b);
      length++;
    }

    return length;
  }
};
\end{minted}
\subsection{todos [1/2]}
\label{sec:org86382aa}
\begin{itemize}
\item[{$\boxtimes$}] write down your solution and analysis
\item[{$\square$}] check solution
\end{itemize}
\section{70. Climbing Stairs}
\label{sec:orgbf96b9c}
\subsection{Problem Statement}
\label{sec:orgd3be576}
\href{https://leetcode.com/problems/climbing-stairs/}{Link}
\subsection{Analysis}
\label{sec:org55d521a}
This problem can be analyzed backward. Assume we have two steps left, we can use two 1 step to finish, or one 2 steps to finish. So the total number of ways to finish is: [number of ways to finish n - 1 stairs] + [number of ways to finish n - 2 stairs].

It is easy to think using recursion to do this, but it will cause a lot of unnecessary calculation (redundant calculation). This problem is identical to calculate Fibonacci number. Recursion is a bad implementation. The good way is to \textbf{Store} the intermediate results, so we can calculate next term easily.

\subsection{Solution}
\label{sec:org9a3d87d}
\subsubsection{C++}
\label{sec:org3103443}
\paragraph{use a vector to hold intermediate result (77\%, 64\%)}
\label{sec:orgbbc14d6}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int climbStairs(int n) {
    if (n == 1)
      return 1;
    else if (n == 2)
      return 2;

    vector<int> steps;
    steps.push_back(1);
    steps.push_back(2);  // steps required when n = 1 & 2

    int step;
    for (int i = 2; i < n; i++) {
      steps.push_back(steps[i - 1] + steps[i - 2]);
    }

    return steps[n - 1];
  }
};
\end{minted}

\subsection{todos [/]}
\label{sec:orgeff27dc}
\begin{itemize}
\item[{$\square$}] read each solution carefully, try to understand the idea and implement by yourself.
\item[{$\square$}] generalize the problem
\end{itemize}

\section{79. Word Search}
\label{sec:org3e121ce}
\subsection{Problem Statement}
\label{sec:orgd4fdcc9}
\href{https://leetcode.com/problems/word-search/}{Link}
\subsection{Analysis}
\label{sec:org57318ad}
\subsubsection{Recursion and record visited slot (my first approach)}
\label{sec:orgb8d4df6}
Pay attention to "the same letter cell may not be used more than once". Not only the immediate previous letter can't be used, all the used letters can't be used. So, a set is used to record all visited slot.

Recursive way to solve this problem would be using a recursive function to search the adjacent cells. We need to build a helper with following abilities: we pass in a coordinate (row and column) and a word, this function will return a boolean value representing if the word can be found in path starting at the passed-in coordinate.

Specifically, the function accepts following parameters:
\begin{itemize}
\item \texttt{board}: we need to access the original letter board
\item \texttt{visited}: this should be a hash table containing visited cells (represented by row and column number in the board) during the current search. Pay attention that, if a search doesn't get the target word (search failed), you have to remove the corresponding record of the caller-cell. This is because other paths may still need this cell in their search. This hash table should be checked to make sure no cells be used more than once.
\item \texttt{row}, col: the coordinate of the current searching cell.
\item \texttt{word}: the target word to search starting from cell at \texttt{(row, col)}
\end{itemize}

Imagin the actual search process. You are at a certain cell, and you have a word to search. For example, you are going to search "APPLE" start from a cell containing some characters. If the character is not the first letter of the word, you should return false, like the following example:
\begin{verbatim}
X A X
C B D
X F X
\end{verbatim}
You are at cell-B. The four cell-Xs are irrelevant because you can't access them at cell-B. You check if cell-B containing the first letter in "APPLE", in this case, not. So you return false. If you encountered a cell that containing A, you can proceed, like following example:
\begin{verbatim}
X 1 X
4 A 2
X 3 X
\end{verbatim}
If the current cell contains the right letter, we count it as one cell in the total path of the word search. We add the coordinate of this cell to the \texttt{visited} hash table. 

we have to choose an adjacent cell to search. In fact, you have to search each adjacent cells (1, 2, 3, 4) by calling the \texttt{search()} function. The parameter \texttt{word} will be changed, so that the first letter is cut off, and pass the remaining part to the recursive function. Then, if \texttt{search(cell\_1) or search(cell\_2) or search(cell\_3) or search(cell\_4)} is true, we have found the word in some paths from cell\_1 or 2 or 3 or 4. If not, no word could be found in paths starting from this cell. So, we need to remove the visited record of this cell from the hash table \texttt{visited}.

The base case of this recursive function is as follows:
\begin{itemize}
\item \texttt{word} is empty: in this case, the word was found in the last path (because the last word has been cut off). So we can return true. This should always be checked first in all base cases.
\item \texttt{(row, col)} is visited (can be found in \texttt{visited}): return false
\item \texttt{row} or \texttt{col} is out of board boundary: return false
\item the first letter in \texttt{word} can't match \texttt{board[row][col]}: return false
\end{itemize}

The representation of adjacent cell is simple, for example:
\begin{verbatim}
X 1 X
4 A 2
X 3 X
if A: (R, C)
then:
   1 (R - 1, C)
   2 (R, C + 1)
   3 (R + 1, C)
   4 (R, C - 1)
\end{verbatim}

\subsection{Solution}
\label{sec:org64102bd}
\subsubsection{Recursion and record visited slot (my first approach)}
\label{sec:org9fb3e9d}
\paragraph{Python}
\label{sec:orgbc06389}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
class Solution:
    def search(self, board, visited, row, col, words):
	# check words length, if it is empty, it means already been found
	if not words:
	    return True

	# check if row and col has been visited or not
	if (row, col) in visited:
	    return False

	# check row and col, to see if it is valid
	if row < 0 or row >= len(board) or col < 0 or col >= len(board[0]):
	    print(row, col, 'out bound')
	    return False

	# check if the current char in board[row][col] matches the first char in words
	if words[0] != board[row][col]:
	    # visited.remove((row, col))  # remove record of failing search
	    return False
	visited.add((row, col))

	# perform next search, according to where the current function call coming from
	if self.search(board, visited, row - 1, col, words[1:]) or self.search(board, visited, row, col + 1, words[1:]) or self.search(board, visited, row + 1, col, words[1:]) or self.search(board, visited, row, col - 1, words[1:]):
	    return True
	else:
	    visited.remove((row, col))  # remove record of failing search
	    return False


    def exist(self, board, word: str) -> bool:
	visited = set()

	for row in range(len(board)):
	    for col in range(len(board[row])):
		if self.search(board, visited, row, col, word):
		    return True

	print('no match')
	return False
\end{minted}
\subsection{todos [1/2]}
\label{sec:org2b3273e}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\square$}] time complexity analysis of your solution
\item[{$\square$}] check discussion page for more solutions
\end{itemize}
\section{101. Symmetric Tree}
\label{sec:org73595c5}
\subsection{Problem Statement}
\label{sec:orgd766be8}
\href{https://leetcode.com/problems/symmetric-tree/}{Link}
\subsection{Analysis}
\label{sec:org14175fb}
\subsubsection{Recursion}
\label{sec:org4344003}
We need to define a method to describe how two nodes are equal "symmetrically", i.e. if two subtrees with root node \texttt{a} and \texttt{b}, we say subtree \texttt{a} is "equal" with subtree \texttt{b}, if the two subtrees are symmetric.

By this method, we need a helper function that accepts two \texttt{Treenode} pointer (\texttt{a} and \texttt{b}). Its return type is bool. It can tell whether the two subtrees started by the two \texttt{Treenode} passed in are symmetrically equal or not. We use this function recursively. Two subtrees are symmetrically equal, if:
\begin{enumerate}
\item \texttt{a->val == b->val}, the root must have the same value
\item \texttt{a->left} is symmetrically equal to \texttt{b->right}
\item \texttt{a->right} is symmetrically equal to \texttt{b->left}
\end{enumerate}
Case 2, 3 can be determined by calling this function recursively. Case 1 can be determined directly. Also, we have to be aware of the base case (when \texttt{a == nullptr} or \texttt{b == nullptr}.

\subsection{Solution}
\label{sec:org56dbc7a}
\subsubsection{C++}
\label{sec:orgf4e39cc}
\paragraph{recursion (75\%, 64\%)}
\label{sec:org57e9b60}
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  bool isSymmetric(TreeNode* root) {
    if (root == nullptr)
      return true;

    return isSym(root->left, root->right);
  }

  bool isSym(TreeNode* a, TreeNode* b) {
    if (a == nullptr) {
      if (b == nullptr)
	return true;
      return false;
    }

    if (b == nullptr)
      return false;

    if (a->val != b->val)
      return false;

    if (isSym(a->left, b->right) && isSym(a->right, b->left))
      return true;

    return false;
  }
};

\end{minted}
\subsection{todos [1/5]}
\label{sec:org76056bb}
\begin{itemize}
\item[{$\boxtimes$}] write down your analysis (recursion)
\item[{$\square$}] think about iterative solution
\item[{$\square$}] write down analysis (iterative solution)
\item[{$\square$}] check solution and discussion to find out any other idea
\item[{$\square$}] generalize this problem
\end{itemize}

\section{104. Maximum Depth of Binary Tree \label{orgeb4250b}}
\label{sec:org252385a}
\subsection{Problem Statement}
\label{sec:orgfad3152}
\href{https://leetcode.com/problems/maximum-depth-of-binary-tree/}{Link}
\subsection{Analysis}
\label{sec:org4c57d6f}
\subsubsection{Recursion}
\label{sec:orgec8e92d}
A node's maximum depth, is the larger maximum depth of its left and right subtree plus one. Base case: if a node is nullptr, maximum depth is zero.
\subsection{Solution}
\label{sec:org1a68b12}
\subsubsection{C++}
\label{sec:orga709067}
\paragraph{Recursion. Time (88.44\%) Space (91.28\%)}
\label{sec:org8070f05}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  int maxDepth(TreeNode* root) {
    // base case 
    if (root == nullptr)
      return 0;

    int left_depth = maxDepth(root->left);
    int right_depth = maxDepth(root->right);

    return (left_depth >= right_depth ? left_depth + 1 : right_depth + 1);
  }
};
\end{minted}
\subsection{todos [0/3]}
\label{sec:org7a7a554}
\begin{itemize}
\item[{$\square$}] implement DFS approach
\item[{$\square$}] read about the discussion page for more methods and ideas
\item[{$\square$}] make notes in your data structure notes about DFS and BFS
\end{itemize}
\section{108. Convert Sorted Array to Binary Search Tree}
\label{sec:org4adb743}
\subsection{Problem Statement}
\label{sec:orgc3f067c}
\href{https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/}{Link}
\subsection{Analysis}
\label{sec:org007daaa}
\subsubsection{Recursion}
\label{sec:org6caf82f}
This is kind of related to binary search. In order to build a balanced binary search tree, the root node should be the middle num in the array of numbers. Then the left child should be the middle number of all numbers smaller than root, while the right child should be the middle number of all numbers larger than root, and so on.

To solve this problem recursively, first, build the root, then call the function again to build up the left subtree (passing only the first half of the array). Then, call the function again to build up the right subtree (passing only the second half of the array). In order to pass portion of the original array, we can use iterators to regulate the range the function is working on. Thus the function is like:
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
TreeNode* helper(vector<int>::iterator itr_1, vector<int>::iterator itr_2);
\end{minted}
where \texttt{itr\_1} is the beginning of the array, \texttt{itr\_2} is the end of the array.

After analyzing, you'll find two base cases:
\begin{enumerate}
\item \texttt{itr\_1 > itr\_2}, in this case, no node can be built, return a \texttt{nullptr}
\item \texttt{itr\_1 == itr\_2}: this is the edge case, only one node can be built. Build a leaf node and return it
\end{enumerate}

Remeber to update the length of the sub-array to work on.

Time complexity: a total of \(N\) nodes will be created, each creation time is constant, thus the time complexity is \(O(N)\).

\subsection{Solution}
\label{sec:orgf62d131}
\subsubsection{C++}
\label{sec:org80279aa}
\paragraph{recursion}
\label{sec:orgf92cea9}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  TreeNode* helper(vector<int>::iterator itr_1, vector<int>::iterator itr_2) {
    if (itr_1 > itr_2)
      return nullptr;

    if (itr_1 == itr_2) {
      TreeNode* new_node = new TreeNode(*itr_1);
      return new_node;
    }

    auto mid_itr = itr_1 + (itr_2 - itr_1) / 2;
    TreeNode* new_node = new TreeNode(*mid_itr);

    new_node->left = helper(itr_1, mid_itr - 1);
    new_node->right = helper(mid_itr + 1, itr_2);

    return new_node;
  }

  TreeNode* sortedArrayToBST(vector<int>& nums) {
    if (nums.empty())
      return nullptr;

    return helper(nums.begin(), nums.end() - 1);
  }
};
\end{minted}
\subsection{todos [2/4]}
\label{sec:org7c9fb75}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\boxtimes$}] time complexity analysis of your own solution
\item[{$\square$}] check solution/discussion page for more ideas, implement them, and write down corresponding analysis (including time and space complexity analysis
\item[{$\square$}] generalize this problem
\end{itemize}
\section{110. Balanced Binary Tree}
\label{sec:org5d05cf0}
\subsection{Problem Statement}
\label{sec:org5039437}
\href{https://leetcode.com/problems/balanced-binary-tree/}{Link}
\subsection{Analysis}
\label{sec:org2d2b8f2}
\subsubsection{Recursion}
\label{sec:org18ef998}
The balanced tree should satisfy the following conditions:
\begin{enumerate}
\item its left subtree is balanced
\item its right subtree is balanced
\item the height difference of its left subtree and right subtree is within the allowed maximum difference.
\end{enumerate}

So, we can use two recursive function to finish these works. One will give the height of a tree (used in 3). Another will determine if a subtree is balanced or not (used in 1 and 2), we use the function we are trying to develop itself.

\subsection{Solution}
\label{sec:orga711b96}
\subsubsection{C++}
\label{sec:org3fee31a}
\paragraph{recursion}
\label{sec:org8512c2d}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  int depth(TreeNode* t) {
    if (t == nullptr)
      return 0;

    return max(depth(t->left), depth(t->right)) + 1;
  }

  bool isBalanced(TreeNode* root) {
    if (root == nullptr)
      return true;

    if (depth(root->left) - depth(root->right) > 1 || depth(root->left) - depth(root->right) < -1)
      return false;

    return isBalanced(root->left) && isBalanced(root->right);
  }
};

\end{minted}
\subsection{todos [1/4]}
\label{sec:orgc2ee48d}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\square$}] read discussion page to get more ideas, try to implement them
\item[{$\square$}] write down analysis of those other solutions
\item[{$\square$}] generalize the problem
\end{itemize}
\section{111. Minimum Depth of Binary Tree}
\label{sec:org533d949}
\subsection{Problem Statement}
\label{sec:orga74be21}
\href{https://leetcode.com/problems/minimum-depth-of-binary-tree/}{Link}
\subsection{Analysis}
\label{sec:org5dff81c}
\subsubsection{Recursion}
\label{sec:org7f3e277}
The idea is similar with \hyperref[orgeb4250b]{Maximum Depth of Binary Tree}. We may use:
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
return min(minDepth(root->left), minDepth(root->right)) + 1;
\end{minted}

However, there is one situation needs further consiferation:
\begin{verbatim}
  1
 /
2 
\end{verbatim}
The above tree's node 1 has only one child. The other child is \texttt{nullptr}. In this case the above code will choose the right child rather than the left. To deal with this problem, we can use following strategy:
\begin{itemize}
\item if one child is \texttt{nullptr}, then return the \texttt{minDept()} of the other child.
\item otherwise, return the minimum of \texttt{minDept(left)} and \texttt{minDept(right)}.
\end{itemize}

\subsection{Solution}
\label{sec:org8e26981}
\subsubsection{C++}
\label{sec:orgea3254d}
\paragraph{recursion}
\label{sec:orgf79d721}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
/*   bool isLeaf(TreeNode* t) {
    if (t == nullptr)
      return false;

    return (t->left == nullptr && t->right == nullptr);
  } */

  int minDepth(TreeNode* root) {
    if (root == nullptr)
      return 0;

    if (root->left == nullptr)
      return minDepth(root->right) + 1;

    if (root->right == nullptr)
      return minDepth(root->left) + 1;

    return min(minDepth(root->left), minDepth(root->right)) + 1;
  }
};
\end{minted}
\subsection{todos [1/4]}
\label{sec:orgc4ffe41}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\square$}] try DFS
\item[{$\square$}] read discussion and explore more ideas
\item[{$\square$}] try to implement other ideas
\end{itemize}
\section{112. Path Sum}
\label{sec:org21fd8c2}
\subsection{Problem Statement}
\label{sec:orgaf54ea8}
\href{https://leetcode.com/problems/path-sum/}{Link}
\subsection{Analysis}
\label{sec:org067065e}
\subsubsection{Recursion}
\label{sec:org2f35180}
The goal is to find a root-to-leaf path such that sum of all values stored in node is the given sum: \texttt{sum}. We can start from root. Notice that, if \texttt{root->left} or \texttt{root->right} has a path that can add up to \texttt{sum - root->val}, a path is found. This implies that we can recursively call the function itself and find if there is any path that can have \texttt{sum - root->val} target.

One thing should be noticed that is, we have to go down all the way to a leaf to find out the final answer that whether the path of this leaf to root satisfies or not. So there is only two base cases:
\begin{enumerate}
\item the pointer passed in is \texttt{nullptr}: return false
\item the pointer passed in is leaf: check if passed in \texttt{sum} is equal to \texttt{root->val}, if so, return true. Otherwise, return false.
\end{enumerate}

For other situations, we continue call the function. Do not pass in \texttt{nullptr}.

\subsection{Solution}
\label{sec:org996da74}
\subsubsection{C++}
\label{sec:org0786f2d}
\paragraph{recursion (88\%, 92\%)}
\label{sec:org626b8b2}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
      if (root == nullptr)
	return false;

      if (root->left == nullptr && root->right == nullptr) {
	if (root->val == sum)
	    return true;
	else
	    return false;
      }

      if (root->left == nullptr)
	return hasPathSum(root->right, sum - root->val);
      else if (root->right == nullptr)
	return hasPathSum(root->left, sum - root->val);
      else
	return hasPathSum(root->left, sum - root->val) || hasPathSum(root->right, sum - root->val);
    }
};
\end{minted}
\subsection{todos [1/3]}
\label{sec:org809b86c}
\begin{itemize}
\item[{$\boxtimes$}] write down your recursion solution and analysis
\item[{$\square$}] work on the DFS approach
\item[{$\square$}] check discussion, find out other ideas, understand and implement them
\end{itemize}

\section{113. Path Sum II}
\label{sec:orgbc634ed}
\subsection{Problem Statement}
\label{sec:orgb9ec7ce}
\href{https://leetcode.com/problems/path-sum-ii/}{Link}
\subsection{Analysis}
\label{sec:org8d75f01}
\subsubsection{DFS}
\label{sec:org7574efa}
In DFS, you use a stack to keep track of your path. This problem requires you to find out all the path that satisfies the requirement. So you have to do book-keeping. The basic DFS idea is as follows.
\begin{enumerate}
\item we push the root into a stack: \texttt{v}.
\item use a while loop to find all combinations of root-to-leaf path: \texttt{while (!v.empty())}
\item if the top node in the stack is a leaf, then it suggests the current stack is holding a complete root-to-leaf path. We should check if this path adds to the target sum. If so we have to push this path into the result. Then, we have to trace backward, until we found a previous node that has unvisited child \textbf{OR} the stack is empty. Each time we push a node into the stack, we have to mark it as visited. We achieve this by using an unordered\_set to record these nodes being pushed into the stack. Unordered\_set has fast retrival rate using a key.
\item if the top node in the stack is not a leaf, then we have to continue to push its children into the stack. We first try inserting left child, and then right child. This depends on the visit history of the children. Only one child per loop. After inserting one child, we \texttt{continue}, beginning the next loop.
\item from the above analysis, we can see that we trace back, only when we meet a leaf node. This guarantees that the found path is root-to-leaf path.
\item after the while loop, the stack becomes empty, which means all nodes are visited. Then we return the result.
\end{enumerate}

\subsection{Solution}
\label{sec:org26ad0f7}
\subsubsection{C++}
\label{sec:orge747be2}
\paragraph{DFS (80\%, 40\%)}
\label{sec:orgd259dfc}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  // member variables
  vector<vector<int>> results;
  unordered_set<TreeNode*> visited_nodes;

  // helper functions
  bool isLeaf(TreeNode* t) {
    return (t->left == nullptr) && (t->right == nullptr);
  }

  void traceBack(vector<TreeNode*>& v) {
    while (!v.empty() && !hasUnvisitedChild(v.back()))
      v.pop_back();
  }

  bool hasUnvisitedChild(TreeNode* t) {
    return !(isVisited(t->left) && isVisited(t->right));
  }

  bool isVisited(TreeNode* t) {
    if (t == nullptr || visited_nodes.find(t) != visited_nodes.end())
      return true;

    return false;
  }

  void checkVal(const vector<TreeNode*>& v, int target) {
    int sum = 0;
    vector<int> result;
    for (auto node : v) {
      result.push_back(node->val);
      sum += node->val;
    }

    if (sum == target)
      results.push_back(result);
  }

  // solution function
  vector<vector<int>> pathSum(TreeNode* root, int sum) {
    if (root == nullptr)
      return results;

    vector<TreeNode*> v{root};
    visited_nodes.insert(root);

    while (!v.empty()) {
      // check the last node: to see if it is leaf 
      if (isLeaf(v.back())) {
	checkVal(v, sum);
	traceBack(v);
	continue;
      }

      if (!isVisited(v.back()->left)) {
	visited_nodes.insert(v.back()->left); // mark as visited
	v.push_back(v.back()->left);
	continue;
      }

      if (!isVisited(v.back()->right)) {
	visited_nodes.insert(v.back()->right); // mark as visited
	v.push_back(v.back()->right);
	continue;
      }
    }

    return results;
  }
};
\end{minted}
\subsection{todos [1/4]}
\label{sec:orgb2eae4f}
\begin{itemize}
\item[{$\boxtimes$}] write down your DFS solution and analysis
\item[{$\square$}] work on the recursion approach
\item[{$\square$}] check discussion, find out other ideas, understand and implement them
\item[{$\square$}] generalize the problem
\end{itemize}
\section{121. Best Time to Buy and Sell Stock}
\label{sec:org0c81148}
\subsection{Problem Statement}
\label{sec:org91b3ced}
\href{https://leetcode.com/problems/best-time-to-buy-and-sell-stock/}{Link}
\subsection{Analysis}
\label{sec:org3a6a942}
\subsubsection{Brutal force (my initial solution)}
\label{sec:org77ac455}
This is my initial solution. For each stock price, traverse through the rest of the array and calculate each profits. If a profit is found to be larger than the current max profit, assign this value to the max profit. Repeat this to all of the rest points.

The time complexity is:\((N-1)+(N-2)+\ldots+1=\frac{N(N-1)}2=O(N^2)\).
The space complexity is \(O(1)\), for memories used is not related to input size.
\subsubsection{One pass}
\label{sec:org3f3e362}
In the brutal force method, we are doing many unnecessary calculations. For example, the input \texttt{prices} is:
\begin{verbatim}
[7,1,5,3,6,4]
\end{verbatim}
The second element is the lowest price. In brutal force method, when we deal with this element, we calculated:
\begin{verbatim}
5 - 1 = 4
3 - 1 = 2
6 - 1 = 5
4 - 1 = 3
\end{verbatim}
5 is obtained as the maxprofit. Then, we move on to the next element, which is \texttt{5}. In brutal force, we still needs to calculate the following:
\begin{verbatim}
3 - 5 = -2
6 - 5 = 1
4 - 5 = -1
\end{verbatim}
If we keep track of the \texttt{minprice}, we will know that these calculations are totally unnecessary.
To obtain the maxprofit, we use two variables to hold the min price upto a point (\texttt{minprice}), and the current maximum profit calculated (\texttt{maxprofit}). Initially, we set the \texttt{minprice} as the first price in \texttt{prices}, and \texttt{maxprofit = 0}. For each price we encountered (\texttt{prices[i]}), we compare it with the \texttt{minprice}. If it is lower than the \texttt{minprice}, update the \texttt{minprice}. Then, we calculate \texttt{prices[i] - minprice}, if this is larger than the \texttt{maxprofit}, we update the \texttt{maxprofit}. In this approach, the \texttt{minprice} will always before the sell price.

Time complexity of this algorithm is \(O(N)\), since only one pass is performed. Space complexity is \(O(1)\), since the memory used is not related to input size.

\subsection{Solution}
\label{sec:orgda92fc6}
\subsubsection{C++}
\label{sec:org24b92da}
\paragraph{brutal force}
\label{sec:orga210b91}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int maxProfit(vector<int>& prices) {
    if (prices.size() < 2)
      return 0;

    int max_profit = 0;
    int profit;

    for (int i = 0; i < prices.size() - 1; ++i) {
      for (int j = i + 1; j < prices.size(); ++j) {
	profit = prices[j] - prices[i];
	if (profit > max_profit)
	  max_profit = profit;
      }
    }

    return max_profit;
  }
};
\end{minted}
\paragraph{one pass}
\label{sec:org81a1140}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int maxProfit(vector<int>& prices) {
    if (prices.size() < 2)
      return 0;

    int minprice = prices[0];
    int maxprofit = 0;

    for (int i = 0; i < prices.size(); i++) {
      if (minprice > prices[i])
	minprice = prices[i];

      if (prices[i] - minprice > maxprofit)
	maxprofit = prices[i] - minprice;
    }

    return maxprofit;
  }
};
\end{minted}
\subsection{todos [3/4]}
\label{sec:orgf24ce9a}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\boxtimes$}] time complexity analysis of your own solution
\item[{$\boxtimes$}] check solution/discussion page for more ideas, implement them, and write down corresponding analysis (including time and space complexity)
\begin{itemize}
\item[{$\boxtimes$}] one pass
\end{itemize}
\item[{$\square$}] generalize this problem
\end{itemize}
\section{122. *Best Time to Buy and Sell Stock II \label{orgc94ed1a}}
\label{sec:orgfd2bb68}
\subsection{Problem Statement}
\label{sec:org6a149be}
\href{https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/}{Link}
\subsection{Analysis}
\label{sec:org37e60fe}
\subsubsection{Initial Analysis (greedy algorithm, failed)}
\label{sec:org9590990}
When making decisions, how do you know higher profit lies ahead? How do you make the ideal choice when you only have local information, not the global information?

In the \href{https://brilliant.org/wiki/greedy-algorithm/}{example} of greedy algorithm (the Dijkstra's algorithm), the shortest distance a node can get is updated when calculating new distances from a node being visited to unvisited neighbor nodes. If the newly calculated distance is shorter than the old distance, it is updated to reflect the more "global view" of ideal solution. The global aspect of the data is used during decision making because the calculated distance is the sum from beginning to the target node.

Back to this problem. We may need to \textbf{STORE} the max profit to each node, just as we store the minimum accumulative distance in each node in Dijkstra's algorithm's example. In this problem, the concept of neighboring is different from the neighboring nodes in graph. A node and its neighbor can be treated as a buying node and a selling node. So, for a specific node, all nodes after it can be viewed as neighboring node.
\subsubsection{Initial Analysis (plot and recoganize the pattern, greedy algorithm)}
\label{sec:org5dbe06e}
Take price sequence \texttt{[7,1,5,3,6,4]} as an example. We want to maximize the profit, the the rule of thumb for buying a stock at day \texttt{i} is, the price at the day \texttt{i + 1} is higher than the current day. The rule of thumb for selling a stock at day \texttt{i} is, the price at day \texttt{i + 1} is lower than day \texttt{i}. If \texttt{prices[i + 1] > prices[i]}, we can hold the stock and wait until day \texttt{i + 1} to sell it, to maximize the profit. For each buy-sell operation, we seek to maximize profit of it.

Problems which can be solved by greedy algorithm has following two requirements:
\begin{enumerate}
\item Greedy choice property: a global optimal solution can be achieved by choosing the optimal choice at each step
\item Optimal substructure: a global optimal solution contains all optimal solutions to the sub-problems
\end{enumerate}

Back to our problem, in order to achieve the over all maximum profit, we need to achieve sub-maximum profit for each price change cycle. So, when buying stock, if \texttt{prices[i + 1] < prices[i]}, we may want to buy at day \texttt{i + 1} rather than day \texttt{i}. Also, when selling stock, if we find a price drop (i.e. \texttt{prices[i + 1] < prices[i]}, we may want to sell our stock at day \texttt{i} rather than day \texttt{i + 1}, so we can get more profit.

The algorithm steps are as follows:
\begin{itemize}
\item check if size of \texttt{prices} is less than two, if so, return 0
\item define a variable \texttt{max\_profit} and initialize it to 0
\item go over the \texttt{prices} array. For a certain day \texttt{i}, if we find \texttt{prices[i + 1] <= prices[i]}, we don't buy the stock. And since we didn't buy it, we can't sell it, so we go to next day.
\item if we find \texttt{prices[i + 1] > prices[i]}, we buy the stock. And we traverse from day \texttt{i + 1} to end of the array. If we find a day \texttt{j}, such that \texttt{prices[j + 1] < prices[j]}, it means the price will drop at day \texttt{j + 1}, so we'd better sell it on day \texttt{j}. So, the profit is updated by the profit earned in this transaction, which is: \texttt{prices[j] - prices[i]}.
\item repeat the buying and selling process until we reach the end of the array.
\end{itemize}

The time complexity of this approach is \(O(N)\). Since you only need to go over the array once. When you found a buying day, you continue to search a selling day, after you found a selling day, you don't go back, you start from the next day of the selling day. Thus the total time complexity is \(O(N)\).

The space complexity of this approach is \(O(N)\) (didn't copy the entire array, the memory used is not related to the total size of the array).

\subsection{Solution}
\label{sec:org3d1fc3e}
\subsubsection{C++}
\label{sec:org02fd0a8}
\paragraph{plot and recoganize the pattern (greedy algorithm, my first try)}
\label{sec:orgf943c28}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int maxProfit(vector<int>& prices) {
    if (prices.size() < 2)
      return 0;

    int max_profit = 0;

    for (int i = 0; i < prices.size() - 1; i++) {
      if (prices[i + 1] <= prices[i])
	continue;

      int j = i + 1;
      while (j < prices.size() - 1 && prices[j + 1] > prices[j])
	j++;

      max_profit += prices[j] - prices[i];
      i = j;

    }

    return max_profit;
  }
};
\end{minted}

\subsection{todos [2/4]}
\label{sec:orgef848e6}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\boxtimes$}] time complexity analysis of your own solution
\item[{$\square$}] check solution/discussion page for more ideas, implement them, and write down corresponding analysis (including time and space complexity analysis
\begin{itemize}
\item[{$\square$}] brutal force
\item[{$\square$}] peak valley
\item[{$\square$}] simple one pass
\end{itemize}
\item[{$\square$}] generalize this problem
\end{itemize}
\section{136. Single Number}
\label{sec:org83bf3c5}
\subsection{Problem Statement}
\label{sec:org3704a8f}
\href{https://leetcode.com/problems/single-number/}{Link
}
\subsection{Analysis}
\label{sec:org9140057}
\subsubsection{Hash Table}
\label{sec:org6b1d6e8}
A hash table can be used to store the appearing information of each element. We can traverse the array, and try to find if each element encountered is in the hash table or not. If so, we remove it from the hash table. If not, we insert it into the hash table. The final remaining element would be the single number. This leads to hash table solution 1. The average time complexity for each hash table operation (\texttt{insert(), find(), erase()}) are constant, the worst case for them are linear. Thus, the total average case is \(O(N)\), the total worst case is \(O(N^2)\).

We can improve this a little by using an integer \texttt{sum}. Its initial value is zero. Each time we encounter an element, we check if it is in the hash table. If so, we subtract it from \texttt{sum}. If not, we add it to \texttt{sum}, and insert it into the hash table. This approach doesn't have to call \texttt{erase()}, the subtraction does the job, and time complexity of this step is guaranteed constant. Although the total average and worst time complexity is the same as the above one, it can run faster for certain cases. This leads to hash table solution 2.

\subsection{Solution}
\label{sec:org41700ea}
\subsubsection{C++}
\label{sec:org7f58457}
\paragraph{hash table I: time (16.06\%) space (15.74\%)}
\label{sec:orgc1910b7}
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int singleNumber(vector<int>& nums) {
    unordered_set<int> unique_num;

    for (auto num : nums) {
      auto itr = unique_num.find(num);

      if (itr == unique_num.end())
	unique_num.insert(num);
      else
	unique_num.erase(itr);
    }

    return *unique_num.begin();
  }
};
\end{minted}
\paragraph{hash table II: 37\%, 15\%}
\label{sec:org31b1a67}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int singleNumber(vector<int>& nums) {
    unordered_set<int> record;

    int sum = 0;

    for (auto num : nums) {
      if (record.find(num) == record.end()) {
	sum += num;
	record.insert(num);
      }

      else
	sum -= num;
    }

    return sum;
  }
};
\end{minted}
\subsection{todos [3/4]}
\label{sec:orgacd36c4}
\begin{itemize}
\item[{$\boxtimes$}] write your solution step (in analysis part), analysis time and space complexity
\item[{$\boxtimes$}] think about possible improvements
\item[{$\boxminus$}] read solution, do additional work (internalize it and write analysis and code)
\begin{itemize}
\item[{$\boxtimes$}] brutal force: use another array to hold
\item[{$\square$}] math
\item[{$\square$}] bit manipulation
\end{itemize}
\item[{$\square$}] read discussion, do additional work (internalize it and write analysis and code)
\end{itemize}
\section{160. Intersection of Two Linked Lists}
\label{sec:org1a154d7}
\subsection{Problem Statement}
\label{sec:orgc37e96a}
\href{https://leetcode.com/problems/intersection-of-two-linked-lists/}{Link}
\subsection{Analysis}
\label{sec:org00343d3}
Assume the size of list \texttt{A} is \emph{(m}), and the size of list \texttt{B} is \emph{(n}).
\subsubsection{Brutal force}
\label{sec:org4d406e5}
We can traverse list \texttt{A}. For each encountered node, we traverse list \texttt{B} to find out if there is a same node. The time complexity should be \emph{(O(mn)}). Since we don't use other spaces to store any information, the space complexity is \emph{(O(1)}).

\subsubsection{Hash table}
\label{sec:orgbc8b766}
First, we traverse list \texttt{A} to store all the address information of each node in a hash table (e.g. Unordered-set). Then we traverse list \texttt{B} to find out if each node in \texttt{B} is also in the hash table. If so, it is an intersection.

\subsubsection{Skip longer list}
\label{sec:orge7a1dcf}
Let's consider a simpler situation: list \texttt{A} and list \texttt{B} has the same size. We just need to traverse the two lists one node at a time. If there is an intersection, it must be at the same relative position in the list.

In this problem, we may not have lists that with same size. However, if two linked lists intersect at some point, the merged part's length does not exceed the size of the shorter list. This means we can skip some beginning parts of the longer list because intersection could not possibly happen there. For example:
\begin{verbatim}
List A: 1 5 2 8 6 4 9 7 3
List B:       4 8 1 9 7 3
                    ↑
\end{verbatim}
List \texttt{A} and \texttt{B} intersect at node 9. We can skip the \texttt{[1, 5, 2]} part in list \texttt{A} and then treat them as list with same size:
\begin{verbatim}
List A': 8 6 4 9 7 3
List B : 4 8 1 9 7 3
               ↑
\end{verbatim}

So the steps to solve this problem are:
\begin{enumerate}
\item traverse list \texttt{A} and \texttt{B} to find out the size of two lists
\item skip beginning portion of longer list so that the remaining part of the longer list has the same size as the shorter list
\item check the two lists and find possible intersection
\end{enumerate}

The time complexity: \(O(n)\) or \(O(m)\), depends on which is bigger. The space used is not related to the input size, thus space complexity is \(O(1)\).

\subsubsection{Two pointer}
\label{sec:orga265ed0}
\subsection{Solution}
\label{sec:orgfb7bb14}
\subsubsection{C++}
\label{sec:org277e102}
\paragraph{brutal force}
\label{sec:orgd489037}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
  ListNode* exist(ListNode* ptr, ListNode* head) {
    while (head != nullptr && ptr != head) {
      head = head->next;
    }

    return head;
  }

  ListNode* getIntersectionNode(ListNode *headA, ListNode *headB) {
    while (headA != nullptr) {
      ListNode* result = exist(headA, headB);

      if (result != nullptr)
	return result;

      headA = headA->next;
    }

    return headA;
  }
};
\end{minted}
\paragraph{hash table}
\label{sec:org561a524}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

  ListNode* getIntersectionNode(ListNode *headA, ListNode *headB) {
    unordered_set<ListNode*> A_record;

    // record A's node 
    while (headA != nullptr) {
      A_record.insert(headA);
      headA = headA->next;
    }

    // go over B and find if there is any intersection
    while (headB != nullptr) {
      if (A_record.find(headB) != A_record.end())
	return headB;

      headB = headB->next;
    }

    return headB;
  }
};
\end{minted}
\paragraph{skip longer lists}
\label{sec:orge6052e2}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

  ListNode* getIntersectionNode(ListNode *headA, ListNode *headB) {
    int size_A = 0;
    int size_B = 0;

    ListNode* start_A = headA;
    ListNode* start_B = headB;

    // count the number of nodes in A and B
    while (start_A != nullptr) {
      start_A = start_A -> next;
      size_A++;
    }

    while (start_B != nullptr) {
      start_B = start_B -> next;
      size_B++;
    }

    // skip the first portion of the list
    if (size_A > size_B) {
      int skip = size_A - size_B;

      for (int i = 1; i <= skip; i++)
	headA = headA -> next;
    }

    else if (size_A < size_B) {
      int skip = size_B - size_A;

      for (int i = 1; i <= skip; i++)
	headB = headB -> next;
    }

    // now A and B has same relative length, check possible intersection
    while (headA != nullptr && headA != headB) {
      headA = headA -> next;
      headB = headB -> next;
    }

    return headA;

  }
};
\end{minted}
\subsection{todos [1/3]}
\label{sec:org3cab75a}
\begin{itemize}
\item[{$\boxtimes$}] write down your analysis and solution
\item[{$\square$}] read the two pointer solution, understand, implement, record
\item[{$\square$}] read discussion page to see if there is any other solution
\end{itemize}
\section{167. Two Sum II - Input array is sorted}
\label{sec:org8c53ad5}
\subsection{Problem Statement}
\label{sec:org42edca1}
\subsection{Analysis}
\label{sec:org9782cf7}
\subsubsection{Using similar idea in \hyperref[org496fe93]{1. Two Sum}.}
\label{sec:orgcde747b}
In this problem, the array has already been sorted. So we can start from the array, for each encountered element, we calculate the corresponding counterpart. Then we use binary search to find out if it exists in the array. The range is from the next element to the last element.

The first submission was not passed. Then I made some optimization (just for this case). They are:
\begin{enumerate}
\item if the current element is the same as the previous element, we pass to next (because the previous element didn't find match, this one won't either)
\item if the counterpart is larger than the largest element in the array, or its smaller than the current element, we pass to next. Since in this situation, no match is possible.
\item in the binary search function, a constant reference was used to avoid copying of the original array.
\end{enumerate}
\subsection{Solution}
\label{sec:org686978c}
\subsubsection{C++}
\label{sec:org2f5ca47}
\paragraph{binary search (69\%, 90\%)}
\label{sec:org3e2054e}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int binarySearch(int target, int index, const vector<int>& nums) {
    int start_index = index;
    int end_index = nums.size() - 1;
    int middle;

    while (start_index <= end_index) {
      middle = (start_index + end_index) / 2;

      if (nums[middle] == target)
	return middle;

      else if (nums[middle] < target)
	start_index = middle + 1;

      else
	end_index = middle - 1;
    }

    return -1;
  }


  vector<int> twoSum(vector<int>& nums, int target) {    
    int index_1 = -1;
    int index_2 = -1;

    for (int i = 0; i < nums.size(); i++) {
      //check if duplicate encountered
      if (i > 0 && nums[i] == nums[i - 1])
	continue;

      int counter_part = target - nums[i];

      // check range
      if (counter_part > nums.back() || counter_part < nums[i])
	continue;

      int counter_part_index = binarySearch(counter_part, i + 1, nums);

      if (counter_part_index != -1) { // match found
	index_1 = i;
	index_2 = counter_part_index;
	break;
      }     

    }

/*     if (index_1 > index_2)
      return {index_2, index_1};
    else
      return {index_1, index_2}; */
    return {index_1 + 1, index_2 + 1};
  }
};

/*cases: 
[2,7,11,15]
9

[1,2,3,4,5,6,7,8,9,10]
10

[2,5,7,9,11,16,17,19,21,32]
25

*/
\end{minted}
\subsection{todos [1/3]}
\label{sec:orgf96f53d}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution
\item[{$\square$}] try to think about two-pointers method (check discussion page)
\item[{$\square$}] check discussion page for more ideas
\end{itemize}
\section{169. Majority Element}
\label{sec:org63df87e}
\subsection{Problem Statement}
\label{sec:org20864f8}
\href{https://leetcode.com/problems/majority-element/}{Link}
\subsection{Analysis}
\label{sec:orgf8b627e}
\subsubsection{\texttt{unordered\_map}}
\label{sec:orgea8e9bd}
This is a problem that record the frequency of the element. I use the number as key and the appearing times as value, build an unordered\_map that store this information. As long as a number's appearing times is more than \texttt{size / 2}, it will be the majority element.
\subsection{Solutions}
\label{sec:org4a0602d}
\subsubsection{C++}
\label{sec:orgf32e610}
\paragraph{\texttt{unordered\_map} (59\%, 42\%)}
\label{sec:org0ef5d72}
Not very fast.
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int majorityElement(vector<int>& nums) {
    unordered_map<int, int> frequency_count;

    for (auto num : nums) {
      if (frequency_count.find(num) != frequency_count.end()) {
	frequency_count[num] += 1;
	if (frequency_count[num] > nums.size() / 2)
	  return num;
      }

      else
	frequency_count.insert(make_pair(num, 1));
    }

    return nums[0];
  }
};
\end{minted}
\subsection{todos [1/3]}
\label{sec:orgbbff7e3}
\begin{itemize}
\item[{$\boxtimes$}] think about other solution (use about 30 min)
\item[{$\square$}] read discussion and contemplate other solution
\item[{$\square$}] generalize the problem
\end{itemize}
\section{198. House Robber}
\label{sec:org1ea4ce1}
\subsection{Problem Statement}
\label{sec:org6d7377e}
\href{https://leetcode.com/problems/house-robber/}{Link}
\subsection{Analysis}
\label{sec:org1dca4ed}

\subsection{Solution}
\label{sec:org65d63c6}

\subsection{todos [0/4]}
\label{sec:org8ad1ea8}
\begin{itemize}
\item[{$\square$}] write down your own solution and analysis
\item[{$\square$}] time complexity analysis of your own solution
\item[{$\square$}] check solution/discussion page for more ideas, implement them, and write down corresponding analysis (including time and space complexity analysis
\item[{$\square$}] generalize this problem
\end{itemize}
\section{206. Reverse Linked List}
\label{sec:org873f206}
\subsection{Problem Statement}
\label{sec:orgd3396bf}
\href{https://leetcode.com/problems/reverse-linked-list/}{Link}

Notice that the \texttt{head} in this linked list is actually the first node in the list. Not like what you learned in COP 4530.
\subsection{Analysis}
\label{sec:org9bcd476}
This problem should have some simpler solution. My two solutions are just akward.
\subsubsection{Using Stack (my)}
\label{sec:org786824a}
\subsubsection{Recursion (my)}
\label{sec:orgaea57ec}
\subsection{Solution}
\label{sec:org510568a}
\subsubsection{C++}
\label{sec:org7c9c037}
\paragraph{Using Stack. time (96\%), space (5\%)}
\label{sec:orgdfe99a9}
This method uses a stack to keep the reverse order. Additional memory is required.
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
  ListNode* reverseList(ListNode* head) {
    stack<ListNode*> nodes;
    // check if head is nullptr
    if (head == nullptr)
      return head;

    // store the list in stack 
    while (true) {
      if (head->next != nullptr) {
	nodes.push(head);
	head = head->next;
      }

      else { // head is pointing the last node
	nodes.push(head);
	break;
      }
    }

    // start re-connect
    head = nodes.top();
    nodes.pop();
    ListNode* last_node = head;

    while (!nodes.empty()) {
      last_node->next = nodes.top();
      last_node = last_node->next;
      nodes.pop();
    }

    last_node->next = nullptr;

    return head;
  }
};
\end{minted}
\paragraph{Using Recursion. time (18\%), space (21\%)}
\label{sec:org85ea100}
This approach is a very "akward" way to use recursion.
\subsection{todos [/]}
\label{sec:org0d0d8e0}
\begin{itemize}
\item[{$\square$}] try to think another way to work this problem
\item[{$\square$}] read solution, write down thinking process
\item[{$\square$}] time complexity analysis of your code and solution code
\end{itemize}
\section{226. Invert Binary Tree}
\label{sec:orgdd208bb}
\subsection{Problem Statement}
\label{sec:org7a03ff6}
\href{https://leetcode.com/problems/invert-binary-tree/}{Link}
\subsection{Analysis}
\label{sec:orgf5e0f4d}
\subsubsection{Recursion}
\label{sec:orgd738fd7}
To solve this problem recursively, we first invert the left subtree of a node by calling this function, then we invert the right subtree of this node by calling this function. Then we return a pointer to this node. Base case: \texttt{node == nullptr}, in this case we return the node directly, since the invert of a \texttt{nullptr} tree is itself.
\subsection{Solution}
\label{sec:org1a5bb38}
\subsubsection{C++}
\label{sec:org8e3c955}
\paragraph{Recursion. time (91.95\%) space (5.15\%)}
\label{sec:orga84d5fe}
I don't understand why my code require this amount of space. Needs to be analyzed.
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  TreeNode* invertTree(TreeNode* root) {
    if (root == nullptr)
      return root;

    TreeNode* temp = root->left;
    root->left = invertTree(root->right);
    root->right = invertTree(temp);

    return root;
  }
};
\end{minted}
\subsection{todos [0/2]}
\label{sec:org5a38bbd}
\begin{itemize}
\item[{$\square$}] analyze why my code requires a lot more space than the divide and conquer method
\item[{$\square$}] read the discussion page for more solution
\end{itemize}
\section{242. Valid Anagram}
\label{sec:orgd8e4088}
\subsection{Problem Statement}
\label{sec:org6545cf9}
\href{https://leetcode.com/problems/valid-anagram/}{Link}
\subsection{Analysis}
\label{sec:orgc3853a9}
\subsubsection{Sort}
\label{sec:org8fdd830}
\subsubsection{Hash Table}
\label{sec:org1a77505}
\subsection{Solution}
\label{sec:orge2cb0e6}
\subsection{todos [/]}
\label{sec:orgeb0eca5}
\begin{itemize}
\item[{$\square$}] write down your analysis and solution
\item[{$\square$}] check solution and discussion section, read and understand other ideas and implement them
\item[{$\square$}] generalize the problem
\end{itemize}
\section{268. Missing Number}
\label{sec:org1fec1e0}
\subsection{Problem Statement}
\label{sec:org8544c63}
\subsection{Analysis}
\label{sec:org8ce911f}
\subsubsection{math}
\label{sec:org47cc0ad}
The sum of 1 to n is \texttt{n * (n + 1) / 2}. So, we can calculate this first and then traverse the array, subtract each element from the sum. The final remaining number is equal to the missing number.
\subsection{Solution}
\label{sec:orgbac26bc}
\subsubsection{C++}
\label{sec:orgdf5c624}
\paragraph{math: time \(O(N)\), space \(O(1)\)}
\label{sec:orgb75dd3b}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int missingNumber(vector<int>& nums) {
    int sum = nums.size() * (nums.size() + 1) / 2;

    for (auto& num : nums) {
      sum -= num;
    }

    return sum;
  }
};
\end{minted}
\subsection{todos [1/3]}
\label{sec:org70c06d9}
\begin{itemize}
\item[{$\boxtimes$}] write down your solution and analysis
\item[{$\square$}] read solution page, understand and implement each solution, and write down analysis
\begin{itemize}
\item[{$\square$}] sorting
\item[{$\square$}] hash table
\item[{$\square$}] bit manipulation
\end{itemize}
\item[{$\square$}] generalize this problem
\end{itemize}
\section{283. Move Zeros \label{org61bcc61}}
\label{sec:org0609385}
\subsection{Problem Statement}
\label{sec:org7b38a21}
\href{https://leetcode.com/problems/move-zeroes/}{Link}
\subsection{Analysis}
\label{sec:orgea25fcc}
Make sure you know well the problem statement. For example, in this problem, there is no requirement for the zero element be kepted.
\subsubsection{Two pointers}
\label{sec:orgbc4a280}
We can use two iterators to scan and find out zero and non-zero elements in the array, and swap them. For example, we have the following array:
\begin{verbatim}
[3,1,0,5,4,6,0,9]
 ^
\end{verbatim}
We use an iterator to traverse this array, starting from the first element. If we find zero:
\begin{verbatim}
[3,1,0,5,4,6,0,9]
     ^
\end{verbatim}
we will start another iterator to scan through the rest of the array, and find out the first non-zero element:
\begin{verbatim}
[3,1,0,5,4,6,0,9]
     ^ ^
     a b
\end{verbatim}
as shown above, iterator \texttt{a} is pointing to an encountered zero, and iterator \texttt{b} is pointing to the first non-zero element after \texttt{a}. Then we swap these two elements:
\begin{verbatim}
[3,1,5,0,4,6,0,9]
     ^ ^
     a b
\end{verbatim}
If the rest of the array are all zero, we can just return, because the array is already in shape, for example:
\begin{verbatim}
[3,1,5,0,0,0,0,0] end
       ^           ^
       a           b
\end{verbatim}
We do this until \texttt{a} goes to the end of the array or \texttt{b} encountered \texttt{nums.end()} while searching first non-zero




\subsection{Solution}
\label{sec:org7e11b29}
\subsubsection{C++}
\label{sec:orgf3c971b}
\paragraph{bubble sort. time (5\%) space (75\%)}
\label{sec:orgd9145ca}
Too slow, time complexity is \(O(N^2)\).
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  void moveZeroes(vector<int>& nums) {
    bool swapped;

    // swap array    
    do {
      swapped = false;      

      for (auto iter = nums.begin(); iter != nums.end() - 1; ++iter) {
	if (*iter == 0) {
	  if (*(iter + 1) == 0)
	    continue;
	  swap(*iter, *(iter + 1));
	  swapped = true;
	}   
      }     
    } while (swapped);
  }
};
\end{minted}
\paragraph{remove zeros. time (35\%) space (34\%)}
\label{sec:org9e01ad3}
Still slow. Since the \texttt{erase()} function will reallocate each element after the deleted one. Worst case time complexity should be \(O(N^2)\).
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:

  void moveZeroes(vector<int>& nums) {
    int zero_count = 0;
    for (auto iter = nums.begin(); iter != nums.end(); ++iter)
      if (*iter == 0)
	zero_count++;

    if (zero_count == 0)
      return;

    auto iter = nums.begin();
    int zero_deleted = 0;

    while (zero_deleted < zero_count) {
      if (*iter == 0) {
	iter = nums.erase(iter);
	nums.push_back(0);
	zero_deleted++;
      }

      else
	++iter;       
    }
  }
};
\end{minted}
\paragraph{two pointers. time (5\%) space (80\%)}
\label{sec:orgf4dadd5}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  void moveZeroes(vector<int>& nums) {
    for (auto itr_a = nums.begin(); itr_a != nums.end() - 1; ++itr_a) {
      if (*itr_a == 0) {
	auto itr_b = itr_a;
	while (itr_b < nums.end() && *itr_b == 0)
	  ++itr_b;

	if (itr_b == nums.end())
	  return;

	swap(*itr_a, *itr_b);
      }
    }
  }
};
\end{minted}
\subsection{todos [2/3]}
\label{sec:org4ec89dd}
\begin{itemize}
\item[{$\boxtimes$}] try to think another Solution
\item[{$\boxtimes$}] write down two pointer solution
\item[{$\square$}] read the solution page and study
\begin{itemize}
\item[{$\square$}] analyze solutions, implement them
\item[{$\square$}] analyze your solution: time complexity, any extra work performed so it is slow
\end{itemize}
\end{itemize}
\section{344. Reverse String}
\label{sec:org371fc40}
\subsection{Problem Statement}
\label{sec:org0a3163d}
\href{https://leetcode.com/problems/reverse-string/}{Link}
\subsection{Analysis}
\label{sec:orgf316e95}
\subsubsection{Direct swap}
\label{sec:org8367756}
The problem requires to reverse in place. So you can swap each "pairing element" in the array. For example:
\begin{verbatim}
['a', 'b', 'c', 'd', 'e']
\end{verbatim}
You swap 'a' and 'e', 'b' and 'd'.

\subsection{Solution}
\label{sec:orge65c9bb}
\subsubsection{Python}
\label{sec:org5812006}
\paragraph{direct swap}
\label{sec:org10b12b3}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
class Solution:
    def reverseString(self, s: List[str]) -> None:
	"""
	Do not return anything, modify s in-place instead.
	"""
	for i in range(int(len(s) / 2)):
	    # c = s[i]
	    # s[i] = s[-i - 1]
	    # s[-i - 1] = c
	    s[i], s[-i - 1] = s[-i - 1], s[i]
\end{minted}
\subsubsection{C++}
\label{sec:org2dd6d8f}
\paragraph{direct swap}
\label{sec:org229c0e0}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  void reverseString(vector<char>& s) {
    for (int i = 0; i < s.size() / 2; ++i) {
      swap(s[i], s[s.size() - i - 1]);
    }
  }
};
\end{minted}

\subsection{todos [1/2]}
\label{sec:orga6abd6e}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution
\item[{$\square$}] check discussion page
\end{itemize}
\section{389. Find the Difference \label{orgeb29835}}
\label{sec:org4995205}
\subsection{Problem Statement}
\label{sec:org2252adb}
\href{https://leetcode.com/problems/find-the-difference/}{Link}
\subsection{Analysis}
\label{sec:org4750568}
\subsubsection{Sort}
\label{sec:org09e0a14}
The two strings will have only one difference. We can just sort the two strings (use \texttt{std::sort()}, time complexity is \(O(N\log{N})\)). Then we traverse the two strings, return the first character that is different. If no difference found to the end of the original string, we return the last character in the second string.

The time complexity would be \(O(N\log{N})\), which is the amount of time \texttt{std::sort()} requires.
\subsubsection{Summation}
\label{sec:org73fe02a}
We can add (the ASCII value) all characters in \texttt{s} together to get \texttt{sum\_s}, then add all characters in \texttt{t} together to get \texttt{sum\_t}. Then, the different character's ASCII value should be \texttt{sum\_t - sum\_s}.

The time complexity to add all characters for a certain string is \(O(N)\). So the total time complexity is \(O(N)\).
\subsubsection{Hash Table}
\label{sec:org8c9ad58}
We can record all characters in \texttt{s} into a hash table that duplicates are allowed (\href{http://www.cplusplus.com/reference/unordered\_set/unordered\_multiset/}{unordered\_multiset} in C++). This is because \texttt{s} might have duplicates. Then, we go through \texttt{t} and try to find if the character we encountered is also in the hash table. If so, we have to erase it from the hash table (this is for situations like \texttt{s} has one certain character, but \texttt{t} has two of this). If not in the hash table, then this is the difference character.

This solution's time complexity is comparable to the sort method. Although the average case should be \(O(N)\). It uses extra space to hold the hash table, so its space complexity is also high \(O(N)\).
\subsection{Solution}
\label{sec:org0a6660c}
\subsubsection{C++}
\label{sec:orgb6f569d}
\paragraph{sort}
\label{sec:orgb15d4d9}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  char findTheDifference(string s, string t) {
    sort(s.begin(), s.end());
    sort(t.begin(), t.end());

    for (auto s_i = s.begin(), t_i = t.begin(); s_i < s.end(); ++s_i, ++t_i) {
      if (*s_i != *t_i)
	return *t_i;
    }

    return t.back();
  }
};
\end{minted}
\paragraph{sum}
\label{sec:org9d5eb15}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  char findTheDifference(string s, string t) {
    int sum = 0;

    for (auto ch : s)
      sum += ch;

    for (auto ch : t)
      sum -= ch;

    return static_cast<char>(-sum);
  }
};
\end{minted}
\paragraph{hash Table}
\label{sec:orgaa6ebbe}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  char findTheDifference(string s, string t) {
    unordered_multiset<char> record;

    // go over s and record each character
    for (auto ch : s)
      record.insert(ch);

    // go over t and check each character
    char difference;

    for (auto ch : t) {
      auto itr = record.find(ch);

      if (itr == record.end()) {
	difference = ch;
	break;
      }

      record.erase(itr);
    }

    return difference;

  }
};
\end{minted}
\subsection{todos [1/3]}
\label{sec:org8a57bcd}
\begin{itemize}
\item[{$\boxtimes$}] write down your solution and analysis
\item[{$\square$}] check discussion page, work on that
\item[{$\square$}] generalize the problem
\end{itemize}
\section{406. Queue Reconstruction by Height}
\label{sec:orgb3aded1}
\subsection{Problem Statement}
\label{sec:org9852a72}
\href{https://leetcode.com/problems/queue-reconstruction-by-height/}{Link}
\subsection{Analysis}
\label{sec:orgfbfc5be}
\subsubsection{Swap person in the queue}
\label{sec:org5efd8ea}
The idea is similar with bubble sort. We traverse the array, for each person, we determine whether it needs swap or not. A person needs swap means, the number of people with equal or greater height than this person before it is different from the corresponding number indicated by this person. For example:
\begin{verbatim}
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
\end{verbatim}
The first person says its height is 7, and there are 0 person infront of it has a height greater or equal 7. This is true, this person doesn't need swap. Then we go to the next person, which is \texttt{[4,4]}. It says the person's height is 4 and there should be 4 persons in front of it whose height is at least 4. This is not the case, so person \texttt{[4,4]} needs to swap.

If the counted number is lower than the indicated number, we should move the current person forward, otherwise, we move the current person backward. To swap, we traverse forward or backward to determine the final position of where should we swap to. Then we do the swap. Take above array as example, we need to swap backward, and \texttt{[7,1], [5,0], [6,1]} are all having a height equal or greater than \texttt{[4,4]}, so we swap \texttt{[4,4]} and \texttt{[6,1]}. Then we marked this round has been swapped.

We keep scanning and swapping the array until a run has not swapped, which means each person is at the right position.

*[?]*The time complexity of a single run is \(O(N^2)\), plus additional costs to run until no swapped happened during a run.
\subsubsection{Place person to the right position directly}
\label{sec:orgf4f7186}
From hint 1:
\begin{quote}
What can you say about the position of the shortest person? 
If the position of the shortest person is i, how many people would be in front of the shortest person?
\end{quote}

From hint 2:
\begin{quote}
Once you fix the position of the shortest person, what can you say about the position of the second shortest person?
\end{quote}


\subsection{Solution}
\label{sec:orgf615e03}
\subsubsection{C++}
\label{sec:orgf381f16}
\paragraph{swap}
\label{sec:org6a8ca23}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
    // check empty 
    if (people.empty())
      return people;

    bool swapped = true;
    int size = people.size();
    int count;
    int swap_index;

    while (swapped) {
      swapped = false;
      for (int i = 0; i < size; i++) {
	count = 0;
	// count # of people who has greater or equal height with people[i]
	for (int j = 0; j < i; j++)
	  if (people[j][0] >= people[i][0])
	    count++;

	// check count 
	if (count > people[i][1]) {
	  swap_index = i;
	  while (count > people[i][1]) {
	    swap_index--;
	    if (people[swap_index][0] >= people[i][0])
	      count--;
	  }
	  swap(people[swap_index], people[i]);
	  swapped = true;
	}

	else if (count < people[i][1]) {
	  swap_index = i;
	  while (count < people[i][1]) {
	    swap_index++;
	    if (people[swap_index][0] >= people[i][0])
	      count++;
	  }
	  swap(people[swap_index], people[i]);
	  swapped = true;
	}        
      }
    }

    // when while loop terminates, no swap happened, all people in position
    return people;
  }
};
\end{minted}
\subsection{todos [0/4]}
\label{sec:org223e52a}
\begin{itemize}
\item[{$\square$}] write down your own solution and analysis
\item[{$\square$}] time complexity analysis of your own solution
\item[{$\square$}] check solution/discussion page for more ideas, implement them, and write down corresponding analysis (including time and space complexity analysis
\item[{$\square$}] generalize this problem
\end{itemize}
\section{412. Fizz Buzz}
\label{sec:org885e1ad}
\subsection{Problem Statement}
\label{sec:org95dedfe}
\href{https://leetcode.com/problems/fizz-buzz/}{Link}
\subsection{Analysis}
\label{sec:orga4e13b3}
\subsubsection{Naive solution (check each condition and add string)}
\label{sec:org9905635}
\subsubsection{String concatenation}
\label{sec:org47cf089}
For each sub-condition satisfies, concatenate the specific string to it. This is neater than the naive solution.
\subsection{Solution}
\label{sec:org1c59ece}
\subsubsection{C++}
\label{sec:orgb151689}
\paragraph{naive Solution}
\label{sec:org16845ea}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  vector<string> fizzBuzz(int n) {
    vector<string> ret;

    for (int i = 1; i <= n; i++) {
      if (i % 3 == 0) {
	if (i % 5 == 0)
	  ret.push_back("FizzBuzz");
	else
	  ret.push_back("Fizz");
      }

      else if (i % 5 == 0)
	ret.push_back("Buzz");

      else
	ret.push_back(to_string(i));
    }

    return ret;
  }
};
\end{minted}
\paragraph{string concatenation}
\label{sec:org683869d}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  vector<string> fizzBuzz(int n) {
    vector<string> ret;
    vector<int> check_num{3, 5};
    vector<string> add_term{"Fizz", "Buzz"};
    string temp;

    for (int i = 1; i <= n; i++) {
      temp.clear();
      for (int j = 0; j < check_num.size(); j++) {
	if (i % check_num[j] == 0)
	  temp += add_term[j];
      }

      if (temp.empty())
	ret.push_back(to_string(i));
      else
	ret.push_back(temp);
    }

    return ret;
  }
};
\end{minted}
\subsection{todos [1/6]}
\label{sec:org102453a}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\square$}] time complexity analysis of your own solution
\item[{$\boxminus$}] check solution/discussion page for more ideas
\begin{itemize}
\item[{$\boxtimes$}] string concatenation
\item[{$\square$}] hash
\end{itemize}
\item[{$\square$}] implement them, and write down corresponding analysis
\item[{$\square$}] time complexity of these Solutions
\item[{$\square$}] generalize this problem
\end{itemize}
\section{437. Path Sum III}
\label{sec:org0ea5059}
\subsection{Problem Statement}
\label{sec:orgb18eeec}
\href{https://leetcode.com/problems/path-sum-iii/}{Link}
\subsection{Analysis}
\label{sec:orgb01d2f6}
\subsubsection{Double recursion (\textasciitilde{}50\%, 50\%)}
\label{sec:orgb30e2ec}
The tricky part is that the path does not need to start or end at the root or a leaf. However, it must go downwards (traveling only from parent nodes to child nodes), this is to say that we don't consider the situation that the path is like: \texttt{left\_child -> node -> right\_child}, which makes things easier.

The tricky part means we may have some paths deep below that sum to the target value, these paths are not connected to the root. In fact, we can conclude that, given a tree (or subtree) starting at \texttt{node}, the paths that sum to the target value are composed of following cases:
\begin{enumerate}
\item paths from \textbf{left} subtree of node that sum to the target, they are not connected to \texttt{node} though
\item paths from \textbf{right} subtree of node that sum to the target, they are also not connected to \texttt{node}.
\item any paths that containing \texttt{node} as their starting node. This includes path connecting \texttt{node} and \texttt{node->left}, paths connecting \texttt{node} and \texttt{node->right}, and also \texttt{node} alone if \texttt{node->val == target}.
\end{enumerate}

Pay attention that we don't have to consider paths like \texttt{left->node->right}, as mentioned earlier. The function header of the solution function is:
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
int pathSum(TreeNode* root, int sum)
\end{minted}

We can use this function to get the result of case 1 and case 2. Since these results are \textbf{NOT} containing the root. As for case 3, we can build a helper function \texttt{continuousSum()} to calculate. This function will also use recursive algorithm. The function header is:
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
int continuousSum(TreeNode* root, int sum)
\end{minted}

It will return the total number of path that containing \texttt{root} and sum to the target \texttt{sum}. Pay attention that, these paths do not need to go from \texttt{root} to leaf. The base case is when \texttt{root == nullptr}, in this case, return zero. The total number can be calculated by calling itself, which is composed of following:
\begin{enumerate}
\item \texttt{continuousSum(root->left, sum - root->val)}
\item \texttt{continuousSum(root->right, sum - root->val)}
\item \texttt{+1 if root->val == sum}
\end{enumerate}

Case 3 is when a path only contains the \texttt{root}. Pay attention that if \texttt{root->left} has a path sum to zero, and \texttt{root->val == sum}, then \texttt{left->root} and \texttt{root} are considered two different pathes. If we think in a recursive way, this will account for those paths that from a node but not reaching leaf. The last node in the path is the node that \texttt{node->val is equal to passed in sum}.
\subsection{Solution}
\label{sec:orgfe2aca1}
\subsubsection{C++}
\label{sec:org63c7141}
\paragraph{double recursion}
\label{sec:org12e6f22}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 /*Notes: 
 calculate continuous sum and un-continuous sum
 */
class Solution {
public:
  int continuousSum(TreeNode* root, int sum) {
    if (root == nullptr)
      return 0;

    int count = continuousSum(root->left, sum - root->val) + continuousSum(root->right, sum - root->val);

    if (sum == root->val)
      count += 1;

    return count;
  }

  int pathSum(TreeNode* root, int sum) {
    if (root == nullptr)
      return 0;

    return continuousSum(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);

  }
};
\end{minted}
\subsection{todos [1/3]}
\label{sec:org337fd06}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution (including analysis).
\item[{$\square$}] check discussion panel, find out other solutions. Understand and write analysis, implement the solution
\item[{$\square$}] write down these analysis
\end{itemize}
\section{442. Find All Duplicates in an Array\label{org6067dc8}}
\label{sec:org1e87b26}
\subsection{Problem Statement}
\label{sec:org0ce981e}
\href{https://leetcode.com/problems/find-all-duplicates-in-an-array/}{Link}
\subsection{Analysis}
\label{sec:org4447689}
\subsubsection{Label Duplicate Number}
\label{sec:orgadd86dd}
Label the appearing frequency of each element, using the fact that \texttt{1 <= a[i] <= n}, where n is the size of array. Then count the number that appeared twice.
\subsection{Solution}
\label{sec:org97e2e85}
\subsubsection{C++}
\label{sec:org14e8695}
\paragraph{Label duplicate number (96\%, 16\%)}
\label{sec:org4666d23}
This one use an extra vector to hold the labeling information.
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  vector<int> findDuplicates(vector<int>& nums) {
    vector<int> duplicate;
    vector<int> frequency_count(nums.size(), 0);

    for (int i = 0; i < nums.size(); i++) {
      frequency_count[nums[i] - 1]++;
    }

    for (int i = 0; i < frequency_count.size(); i++)
      if (frequency_count[i] > 1)
	duplicate.push_back(i + 1);

    return duplicate;
  }
};
\end{minted}

\subsection{todos [/]}
\label{sec:orgf9faf3d}
\begin{itemize}
\item[{$\square$}] think about the way to use original vector to hold labeling information
\item[{$\square$}] read other solutions
\item[{$\square$}] generalize the problem
\end{itemize}
\section{448. Find All Numbers Disappeared in an Array}
\label{sec:org73304c5}
\subsection{Problem Statement}
\label{sec:org197508e}
\href{https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/}{Link}
\subsection{Analysis}
\label{sec:org0499333}
\subsubsection{Label Appearance of Numbers}
\label{sec:org351a0e8}
This is similar with \hyperref[org6067dc8]{Problem 442}. Label the appearing frequency of each element, using the fact that \texttt{1 <= a[i] <= n}, where n is the size of array. Then count the number that appearing frequency is 0.

You can use either a new vector to hold the labeling information, or the original passed-in vector.

\subsubsection{Use Unordered-set}
\label{sec:orgf89c5cd}
Use an unordered-set to store all appeared number. Then traverse from 1 to N to find out if one number is in the set, if not, it is one disappearing number, push to result. This method's time complexity is \(O(N)\) on average, but \(O(N^2)\) for worst cases, due to the time complexity of \texttt{insert()} and \texttt{find()} in unordered-set.

\subsection{Solution}
\label{sec:orgf0a5a38}
\subsubsection{C++}
\label{sec:org116cd6b}
\paragraph{Label appearance of numbers (97\%, 15\%)}
\label{sec:org83f0601}
Space can be optimized by using original passed-in vector.
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  vector<int> findDisappearedNumbers(vector<int>& nums) {
    vector<int> appear_label(nums.size(), 0);
    vector<int> disappear;

    // label appeared number
    for (int i = 0; i < nums.size(); i++) {
      appear_label[nums[i] - 1] = 1;
    }

    // find out unlabelled number 
    for (int i = 0; i < appear_label.size(); ++i)
      if (appear_label[i] == 0)
	disappear.push_back(i + 1);

    return disappear;
  }
};
\end{minted}
\paragraph{Use unordered-set (13\%, 7\%)}
\label{sec:orgb6f38d2}
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  vector<int> findDisappearedNumbers(vector<int>& nums) {
    vector<int> disappear;
    unordered_set<int> appeared; // extra space used

    for (auto num : nums)  // total average O(N), worst: O(N^2)
      appeared.insert(num);  // average: O(1), worst: O(N)

    for (int i = 1; i <= nums.size(); ++i) {
      if (appeared.find(i) == appeared.end())  // find(), average: O(1), worst: O(N)
	disappear.push_back(i);
    }

    return disappear;
  }
};

// Total complexity: average: O(N), worst: O(N^2), still bound by O(N^2)
\end{minted}
\subsection{todos [/]}
\label{sec:org1127bcb}
\begin{itemize}
\item[{$\square$}] think about using the original vector to hold labeling information
\item[{$\square$}] read other solutions
\item[{$\square$}] generalize the problem
\end{itemize}
\section{461. Hamming Distance \label{org0b5d34a}}
\label{sec:orgf4e3572}
\subsection{Problem Statement}
\label{sec:org995db19}
\href{https://leetcode.com/problems/hamming-distance/}{Link}
\subsection{Analysis}
\label{sec:org77e9d29}
To compare two numbers bitwisely, we may need the fact that a number mod 2 is equal to the last digit of its binary form. For example:
\begin{verbatim}
x = 1 (0 0 0 1)
y = 4 (0 1 0 0)
x % 2 = 1
y % 2 = 0
\end{verbatim}
\subsection{Solution}
\label{sec:orgfbfbdd6}
\subsubsection{C++}
\label{sec:orgc48c7d6}
\paragraph{Time(14.63\%)}
\label{sec:org978fb21}
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int hammingDistance(int x, int y) {
    int result = 0;

    while (x != 0 || y != 0) {
      if (x % 2 != y % 2)
	result++;

      x = x >> 1;
      y = y >> 1;
    }

    return result;
  }
};
\end{minted}
\paragraph{Time(94.5\%)}
\label{sec:orgcd5c253}
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int hammingDistance(int x, int y) {
    int result = 0;
    x ^= y;

    while (x) {
      if (x % 2)
	result++;
      x = x >> 1;
    }

    return result;
  }
};
\end{minted}
\paragraph{Questions}
\label{sec:org9190a3f}
Why the second solution is faster than the previous one?
\begin{itemize}
\item Bitwise XOR used.
\end{itemize}
\subsubsection{Python}
\label{sec:org05b7af1}
\paragraph{Faster than 97.37\%}
\label{sec:orgf493429}
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{python}
class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
	result = 0
	while x or y:
	    if x % 2 != y % 2:
		result += 1
	    x = x >> 1
	    y = y >> 1
	return result
\end{minted}
However, this algorithm is exactly the same as C++'s first version. Why such huge speed variance?
\section{477. Total Hamming Distance}
\label{sec:orgff1ffc6}
\subsection{Problem Statement}
\label{sec:org89bb9a3}
\href{https://leetcode.com/problems/total-hamming-distance/}{Link}
\subsection{Analysis}
\label{sec:org904c850}
This problem is similar with \hyperref[org0b5d34a]{P461}, but you can't direcly solve it using that idea (see the first solution). The size of the input is large:
\begin{itemize}
\item Elements of the given array are in the range of \(0\) to \(10^9\)
\item Length of the array will not exceed \(10^4\)
\end{itemize}

\subsubsection{First Attempt (too slow)}
\label{sec:org8979875}
My first attempt is just go over all the combinations in the input array: \((x_i, x_j)\) and call the function that calculate the hamming distance of two integers (\hyperref[org0b5d34a]{P461}), the code is shown in solution section. However, this approach is too slow to pass the test.

The time complexity of the function that calculates the hamming distance of two integers is not huge, just \(O(1)\). The real time consuming part is the combination. It is simply:
\[
{N \choose 2} = \frac{N(N-1)}{2} \sim O(N^2)
\]
Inside these combinations, we included many bit-pairs that do not contribute to the total Hamming distance count, for example, the combination of number 91 and 117 is:
\begin{verbatim}
---------------
bit#: 1234 5678
---------------
91:   0101 1011
117:  0111 0101
---------------
\end{verbatim}
The bit at 1, 2, 4, 8 are not contributing to the total Hamming distance count, but we still include it and spend time verifying. This flaw can be solved in the grouping idea.

\subsubsection{Grouping}
\label{sec:org4b04884}
\href{https://leetcode.com/problems/total-hamming-distance/discuss/96250/C++-O(n)-runtime-O(1)-space}{Reference}

The idea of grouping is we count the total hamming distance as a whole. And we only count those valid bits (bits that will contribute to the total Hamming distance). Specifically, at any giving time, we divide the array into two groups \(G_0, G_1\). The rule of grouping is:
\begin{itemize}
\item a number \(n\) that \(n \% 2 = 0\), goes to \(G_0\)
\item a number \(n\) that \(n \% 2 = 1\), goes to \(G_1\)
\end{itemize}
The result of \(n\%2\) will give you the least significant bit, or the last bit of an integer in binary form. By the definition of Hamming distance, we know that any combinations that contains number pairs only from \(G_0\) or only from \(G_1\) will not contribute to the total Hamming distance count (just for this grouping round, which only compares the least significant bit of those numbers). On the other hand, any combination that contains one number from \(G_0\) and one number from \(G_1\) will contribute 1 to the total Hamming distance. So, for this round, we only have to count the combination of such case, which is simply:
\[
N_{G_0} \times N_{G_1}
\]
Then, we trim the current least significant bit and re-group the numbers into new \(G_0\) and \(G_1\). This is because at each bit the numbers are different. We do this until \textbf{ALL} numbers are \textbf{ZERO}. For example, if at one round, there are no numbers in \(G_1\), all numbers are in \(G_0\), then although the contribution to total Hamming distance of this round is zero, we have to move on to trim the least significant bit and re-group the numbers. Another confusing case is when some numbers are trimmed to zero during the process. We still keep those zeros in array, because they still can be used to count total Hamming distance. For example, number 9 and 13317:
\begin{verbatim}
---------------------------
bit#:   1234 5678 9abc defg
---------------------------
9:      0000 0000 0000 1001
13317:  0011 0100 0000 0101
---------------------------
\end{verbatim}
After four times of trimming:
\begin{verbatim}
-----------------------
bit#:   1234 5678 9abc 
-----------------------
9:      0000 0000 0000 
13317:  0011 0100 0000 
-----------------------
\end{verbatim}
The difference at bit 3, 4, 6 should still be counted toward the total Hamming distance.

At each round, we first go over the list and divide the numbers into two groups. This process is \(O(N)\). To calculate the contribution to total Hamming distance at this round is just a matter of multiplication, so the time complexity is \(O(1)\). Thus, for one round, time complexity is \(O(N)\). There are potentially \texttt{8 * sizeof(int)} bits to be trimmed, this is the number of rounds we are going to run, which is a constant not related to \(N\). Thus the total complexity is: \(O(N)\).

\textbf{Additional notes (2019/5/26)} It is not a good idea to \textbf{TRIM} the numbers, which may add additional complexities. We can just use a for loop to compare all \texttt{8 * sizeof(int)} bits on integer. The range of iterating number (i) is from 0 to 31. At each iteration, we compare the value at i-th bit (starting from zero) with 1. To achieve this, we need use two operators (bitwise \textbf{AND} and left shift). Notice that the bitwise \textbf{AND} is 1 only if both bits are 1.
\subsection{Solution}
\label{sec:org02cb565}
\subsubsection{C++}
\label{sec:orgbc55baa}
\paragraph{Not Accepted (too slow)}
\label{sec:org07b862e}
This algorithm is too slow.
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int hammingDistance(const int& x, const int& y) {
    int result = 0;
    int a = x ^ y;

    while (a != 0) {
      if (a % 2)
	result++;
      a = a >> 1;
    }

    return result;
  }  

  int totalHammingDistance(vector<int>& nums) {
    int count = 0;
    for (int i = 0; i < nums.size() - 1; ++i) {
      for (int j = i + 1; j < nums.size(); ++j)
	count += hammingDistance(nums[i], nums[j]);
    }
    return count;
  }
};
\end{minted}
\paragraph{Grouping. time (6.59\%) space (5.13\%)}
\label{sec:org439a032}
This is the first version after I read and apply the idea of grouping numbers with different Least Significant bit. Although it is still slow, it is accepted\ldots{}..
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int totalHammingDistance(vector<int>& nums) {
    vector<int> LSB_ones;
    vector<int> LSB_zeros;
    int count = 0;
    int non_zero_count = 1; // loop continue until no non-zero num in nums

    while (non_zero_count) {
      // clear temp container, reset non-zero count
      LSB_ones.clear();
      LSB_zeros.clear();
      non_zero_count = 0;

      // collect number, divide into two groups
      for (auto& i : nums) {
	if (i % 2 == 0)
	  LSB_zeros.push_back(i);
	else 
	  LSB_ones.push_back(i);

	// update i and non_zero_count
	i = i >> 1;
	if (i)
	  non_zero_count++;
      }

      // update count 
      count += LSB_ones.size() * LSB_zeros.size();
    }

    return count;
  }
};
\end{minted}

There are many reasons why this solution is expensive. Some of them are listed below:
\begin{itemize}
\item There is no need to actually use two vectors to \textbf{STORE} each number in two vectors. You just need to count the number.
\end{itemize}
\paragraph{Grouping\_example. time (88.24\%, 49.76\%)}
\label{sec:org1b2110f}
This is from the discussion (grouping idea).
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int totalHammingDistance(vector<int>& nums) {
    if (nums.size() <= 0) return 0;

    int res = 0;

    for(int i=0;i<32;i++) {
      int setCount = 0;
      for(int j=0;j<nums.size();j++) {
	  if ( nums[j] & (1 << i) ) setCount++;
      }

      res += setCount * (nums.size() - setCount);
    }

    return res;
  }
};
\end{minted}

This solution is a lot faster than my version, altough we use the same idea. I used a lot more steps to do the book keeping, which the example solution uses spaces and time efficiently. Specifically:
\begin{itemize}
\item I have defined two vectors to actually store the \textbf{TWO} groups. My thinking is simple: if the idea involves two groups, then I want to actually implement two groups to closely follow the idea. This reflects the lack of ability to generalize a problem and find what matters most to solve the problem. In this specific example, what matters most, is to \textbf{KNOW} the number of element in just \textbf{ONE} group, there are ways to know this without actually spending time and spaces to keep the whole record of the two groups.
\item my end point would be "there is no non-zero number in the array", I have to declare a new integer to keep track of the number of non-zero number, and I have to use an if expression to determine if a number is non-zero after trimming the least significant bit.  The example code only traverse all the bits of an integer (i.e. 32 bits in total, or 4 bytes) using a for loop.
\end{itemize}

In line 11, the code reads: \texttt{if ( nums[j] \& (1 << i) ) setCount++;}. The operators used are bitwise AND, bitwise left shift. This is to compare the i-th bit of \texttt{num[j]} with 1. If it is 1, then at this bit, the number should be counted in group \(G_1\). For example, if \texttt{num[j] == 113}, \texttt{i == 5}, then we compare:
\begin{verbatim}
           ↓
113:     0111 0001
1 << i:  0010 0000
\end{verbatim}

Also, we don't have to count integer numbers in \(G_0\), since: \(N_{G_0} = N - N_{G_1}\), where \(N\) is the total number of integers, which is equal to \texttt{nums.size()}.

\subsection{todos [3/4]}
\label{sec:org2edacac}
\begin{itemize}
\item[{$\boxtimes$}] Write the analysis of grouping idea and my code
\item[{$\boxtimes$}] Read code in reference of grouping idea, make notes
\item[{$\boxtimes$}] Check other possible solution and make future plan
\item[{$\square$}] Try to generalize this problem
\end{itemize}
\section{543. Diameter of Binary Tree}
\label{sec:orgdbb531a}
\subsection{Problem Statement}
\label{sec:org50303cd}
\href{https://leetcode.com/problems/diameter-of-binary-tree/}{Link}
\subsection{Analysis}
\label{sec:org2057e3a}
\subsubsection{Direct recursion}
\label{sec:org381e041}
Just as stated in the problem statement, the longest path between any two nodes may not pass through the root. So, for a given node, the longest path of this node may have three cases:
\begin{enumerate}
\item longest path is in its left subtree, and does not pass this node;
\item longest path is in its right subtree, and does not pass this node;
\item longest path passes through this node;
\end{enumerate}

We can calculate the path of the above three cases, and find out which one is the longest. Calculate case 1 and 2 is easy, we can call the function recursively to find out the longest path of the left and right subtree. To calculate case 3, we use the fact that: longest path passing this node = height of left subtree + height of right subtree + 2, where "2" correspondes to the two edges connecting left and right subtree to the root node. The we compare these three values and return the largest one.

Also, we have to consider the base case:
\begin{enumerate}
\item this node is \texttt{nullptr}
\item its left subtree is \texttt{nullptr}
\item its right subtree is \texttt{nullptr}
\end{enumerate}

\subsection{Solution}
\label{sec:org880b73c}
\subsubsection{C++}
\label{sec:org438bc1e}
\paragraph{direct recursion (5\%, 5\%)}
\label{sec:orgeff7f00}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  int height(TreeNode* t) {
    if (t == nullptr || (t->left == nullptr && t->right == nullptr))
      return 0; 
    return max(height(t->left), height(t->right)) + 1;
  }

  int diameterOfBinaryTree(TreeNode* root) {
    if (root == nullptr || (root->left == nullptr && root->right == nullptr))
      return 0;

    if (root->left == nullptr)
      return max(height(root), diameterOfBinaryTree(root->right));
    else if (root->right == nullptr)
      return max(height(root), diameterOfBinaryTree(root->left));
    else
      return max(max(height(root->left) + height(root->right) + 2, diameterOfBinaryTree(root->left)), diameterOfBinaryTree(root->right));
  }
};

\end{minted}

\subsection{todos [/]}
\label{sec:org4b7225b}
\begin{itemize}
\item[{$\square$}] check solution and study
\item[{$\square$}] implement solution by yourself
\item[{$\square$}] write down different ways of thinking about this problem
\end{itemize}
\section{557. Reverse Words in a String III}
\label{sec:org978301d}
\subsection{Problem Statement}
\label{sec:org2db9ef9}
\href{https://leetcode.com/problems/reverse-words-in-a-string-iii/}{Link}
\subsection{Analysis}
\label{sec:org48be1f9}
\subsubsection{Python-use \texttt{reversed()} and \texttt{split()}}
\label{sec:orge285578}
This approach is trivial, including using two built-in methods: \texttt{reversed()} and \texttt{split()}. First, the input string is splitted into a list. Each element in the list is a word in the string (separated by whitespaces). Then, these substrings were reversed and added to another empty list to form the sentence. A space should be added after each word. You have to get rid of tailing space.
\subsection{Solution}
\label{sec:org59cd0a3}
\subsubsection{Python}
\label{sec:orgdddb65f}
\paragraph{use \texttt{reversed()} and \texttt{split()}}
\label{sec:org57fd6dc}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
class Solution:
    def reverseWords(s: str) -> str:
	words = s.split()
	reversed_list = []
	for word in words:
	    reversed_list.append(''.join(list(reversed(word))) + ' ')
	reversed_list[-1] = reversed_list[-1][:-1]

	return ''.join(reversed_list)
\end{minted}
\subsection{todos [1/2]}
\label{sec:org66f81bb}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysiss
\item[{$\square$}] read discussion/solution page for more ideas
\end{itemize}
\section{559. Maximum Depth of N-ary Tree \label{orgec8cec4}}
\label{sec:org7e62a39}
\subsection{Problem Statement}
\label{sec:orgf66a72a}
\subsection{Analysis}
\label{sec:orgec97200}
\subsubsection{Recursion}
\label{sec:org17dd9fa}
The recursion idea is similar with \hyperref[orgeb4250b]{104. Maximum Depth of Binary Tree}. In this problem, the tree is N-ary rather than binary. And the node struct of the tree is slightly different from the binary tree. A vector is used to keep record of all the child nodes of one parent node. So, when doing recursion, you traverse the vector and apply the recursive function for each child.

We are allowed to modify the tree node. So we can store the intermediate result in the node->val. Details are shown in the code.
\subsubsection{DFS}
\label{sec:orga3c3d96}

\subsection{Solution}
\label{sec:org3293578}
\subsubsection{C++}
\label{sec:org9b6ba76}
\paragraph{recursion}
\label{sec:org3a082dc}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
	val = _val;
	children = _children;
    }
};
*/
class Solution {
public:
  void maximum(Node* t) {
    // maximum value will be stored in t->val
    if (t->children.size() == 0) {
      t->val = 1;
      return;
    }

    // t has some children, get them maximum value first
    for (auto& child : t->children) {
      maximum(child);
    }

    // now each child's maximum depth is stored in their val
    // find out the maximum 
    int child_max_depth = 0;
    for (const auto& child : t->children) {
      if (child->val > child_max_depth)
	child_max_depth = child->val;
    }

    t->val = child_max_depth + 1;
  }

  int maxDepth(Node* root) {
    if (root == nullptr)
      return 0;

    maximum(root);
    return root->val;
  }
};

/*cases: 
{"$id":"1","children":[{"$id":"2","children":[{"$id":"5","children":[],"val":5},{"$id":"6","children":[],"val":6}],"val":3},{"$id":"3","children":[],"val":2},{"$id":"4","children":[],"val":4}],"val":1}

{"$id":"1","children":[],"val":1}

*/
\end{minted}
\subsection{todos [1/5]}
\label{sec:org32a92bb}
\begin{itemize}
\item[{$\boxtimes$}] write down your recursive solution
\item[{$\square$}] think about DFS traversal, implement and write down analysis
\item[{$\square$}] read discussion panel
\item[{$\square$}] try new idea
\item[{$\square$}] generalize
\end{itemize}
\section{581. Shortest Unsorted Continuous Subarray}
\label{sec:org50d2591}
\subsection{Problem Statement}
\label{sec:org87b661c}
\href{https://leetcode.com/problems/shortest-unsorted-continuous-subarray/}{Link}
\subsection{Analysis}
\label{sec:orgc3c691f}
\subsubsection{Use sorting}
\label{sec:org44d021b}
Let's compare the original array with its sorted version. For example, we have:
\begin{verbatim}
original: 2 6 4 8 10  9  15
sorted:   2 4 6 8  9 10  15
            ^            ^
            1            6
\end{verbatim}
They started to differ at 1, and ended differ at 6. The continuous unsorted subarray is bound to this range, thus we can calculate the length by \texttt{end\_differ\_index - start\_differ\_index}.

Steps to solve this problem:
\begin{enumerate}
\item build a sorted array
\item create two integers: \texttt{end\_differ\_index - start\_differ\_index}, they represent the position where differ between original array and sorted array starts and ends. The default value would be zero, which means no difference.
\item start from beginning, traverse the array to find out the first position where two arrays differ. Store it in \texttt{start\_differ\_index}.
\item start from ending, traverse the array (to the beginning) to find out the last position where two arrays are the same. Store it in \texttt{end\_differ\_index}.
\item return \texttt{end\_differ\_index - start\_differ\_index}, which is the length of the shortest unsorted continuous subarray. If the original array is already sorted, this value would be zero.
\end{enumerate}

\subsection{Solution}
\label{sec:orgc9f9777}
\subsubsection{C++}
\label{sec:org28bb80b}
\paragraph{use sorting}
\label{sec:org10220e2}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int findUnsortedSubarray(vector<int>& nums) {
    vector<int> nums_sorted = nums;
    sort(nums_sorted.begin(), nums_sorted.end());

    int start_differ_index = 0;
    int end_differ_index = 0;

    // determine start_differ_index
    for (int i = 0; i < nums.size(); i++) {
      if (nums[i] != nums_sorted[i]) {
	start_differ_index = i;
	break;
      }
    }

    // determine end_differ_index
    for (int i = nums.size() - 1; i >= 0; i--) {
      if (nums[i] != nums_sorted[i]) {
	end_differ_index = i + 1;
	break;
      }
    }

    // return result 
    return end_differ_index - start_differ_index;
  }
};
\end{minted}
\subsection{todos [1/3]}
\label{sec:org3e6208a}
\begin{itemize}
\item[{$\boxtimes$}] write down your analysis and solution
\item[{$\square$}] check solution page, study, understand and implement them
\item[{$\square$}] study first solution (brutal force)
\end{itemize}
\section{617. Merge Two Binary Trees}
\label{sec:org8853d00}
\subsection{Problem Statement}
\label{sec:org081e948}
\href{https://leetcode.com/problems/merge-two-binary-trees/}{Link}
\subsection{Analysis}
\label{sec:org7c36529}
\subsubsection{Recursive Method}
\label{sec:orgbcc150e}
Use recursiion to solve this problem.
\subsubsection{Iterative Method (using stack)}
\label{sec:org8768bf3}

\subsection{Solution}
\label{sec:org0d3b8f5}
\subsubsection{C++}
\label{sec:org8e69f02}
\paragraph{Recursion Time (97.09\%) Space(37.01\%)}
\label{sec:org3cd74e5}
Recursion.
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
    if (t1 == nullptr)
      return t2;
    else if (t2 == nullptr)
      return t1;
    else {
      TreeNode* node = new TreeNode(t1->val + t2->val);
      node->left = mergeTrees(t1->left, t2->left);
      node->right = mergeTrees(t1->right, t2->right);
      return node;
    }
  }
};
\end{minted}
\paragraph{Iterative}
\label{sec:org4472d01}
\subsection{todos [0/2]}
\label{sec:orgb47bc2b}
\begin{itemize}
\item[{$\square$}] read the other solution (iterate the tree using stack), and understand it
\item[{$\square$}] write code based on the other solution
\end{itemize}
\section{653. Two Sum IV - Input is a BST}
\label{sec:org62e2527}
\subsection{Problem Statement}
\label{sec:org7747bc9}
\href{https://leetcode.com/problems/two-sum-iv-input-is-a-bst/}{Link}
\subsection{Analysis}
\label{sec:orga3d44c0}
\subsubsection{Recursion}
\label{sec:org1b32f63}
We use a recursion to traverse the whole tree. For each node encountered, we use another recursive function to search the whole tree to see whether the counterpart exists in the tree. Be aware that we don't use same node twice, so you have to consider this case in this find counterpart function.


\subsection{Solution}
\label{sec:orgd01e528}
\subsection{todos [/]}
\label{sec:org26f3dc9}
\begin{itemize}
\item[{$\square$}] write down your own solution and analysis
\item[{$\square$}] try DFS method
\item[{$\square$}] check solution page to find out more ideas and implemnent them
\item[{$\square$}] write down analysis of additional solution
\item[{$\square$}] generalize the problem
\end{itemize}
\section{657. Robot Return to Origin}
\label{sec:org5f1f487}
\subsection{Problem Statement}
\label{sec:org153dc25}
\href{https://leetcode.com/problems/robot-return-to-origin/}{Link}
\subsection{Analysis}
\label{sec:org68e8d27}
\subsubsection{Determine if instructions are paired}
\label{sec:org9e06fed}
If a \texttt{'L'} is paired with a \texttt{'R'}, then the effect of their moves will be canceled. Same idea for \texttt{'U'} and \texttt{'D'}. So, we can just count the total number of the instructions and see if they can cancel each other.
\subsection{Solution}
\label{sec:org8b7cea3}
\subsubsection{Python}
\label{sec:org0ee9f4c}
\paragraph{count instruction number}
\label{sec:org5c63703}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
class Solution:
    def judgeCircle(self, moves: str) -> bool:
	if len(moves) % 2 not 0:
	    return false

	return moves.count('L') == moves.count('R') and moves.count('U') == moves.count('D')
\end{minted}
\subsection{todos [1/2]}
\label{sec:orga160be3}
\begin{itemize}
\item[{$\boxtimes$}] write down your analysis and solution
\item[{$\square$}] check discussion page
\end{itemize}
\section{696. Count Binary Substrings}
\label{sec:org55053cd}
\subsection{Problem Statement}
\label{sec:org6d408c5}
\href{https://leetcode.com/problems/count-binary-substrings/}{Link}
\subsection{Analysis}
\label{sec:org1001904}
\subsubsection{Collect meta-substrings \label{org6e6ab6a}}
\label{sec:org2e38df3}
First, we have to be aware that how to divide the input string into separate parts and count. The valid substring should have all 0s and 1s grouped together. So, we may want to divide the string into meta-substrings. A meta-substring is a substring that each 0 and 1 are grouped together. For example, an input of \texttt{'00101000111100101'} can be divided into following meta-substrings:
\begin{verbatim}
'001'
'10'
'01'
'1000'
'0001111'
'111100'
'001'
'10'
'01'
\end{verbatim}
For each meta-substring, we count the number of valid substring. It is clear that the total number of valid substring equals to the length of shorter 1s or 0s. For example, \texttt{'0001111'} has following substrings: \texttt{'000111'}, \texttt{'0011'} and \texttt{'01'}.

My approach is to use two lists to hold each character. One is for the first appearing number, another is for the second appearing number. The next time we meet the first appearing number again, we stop and check the current meta-substring (which is stored in the two lists). Then, we copy the content in second appearing number list to the first appearing number list and continue to count.

The explanation is messy, you can check the code part.
\subsubsection{Count length of single number substring}
\label{sec:org0268b5d}
We can go through the string and count the length of each same-character contiguous blokcs. For example, for string \texttt{"011010011100"}, each substring and its length are:
\begin{verbatim}
substring length
0          1
11         2
0          1
1          1
00         2
111        3
00         2
\end{verbatim}
View horizontally:
\begin{verbatim}
[0 11 0 1 00 111 00]
\end{verbatim}
Then, we go through this list of substrings. Each breakpoint has an event of character change (either from 0 to 1, or from 1 to 0). We compare the length of the substrings at left and right side of the breakpoint. The number of valid substrings is the shorter length (explained in the first analysis part, \hyperref[org6e6ab6a]{collect meta substrings}). Thus we have:
\begin{verbatim}
[0 11 0 1 00 111 00]
 ----
  1
[0 11 0 1 00 111 00]
   ----
    1
[0 11 0 1 00 111 00]
      ---
       1
[0 11 0 1 00 111 00]
        ----
         1
[0 11 0 1 00 111 00]
          ------
            2
[0 11 0 1 00 111 00]
             ------
               2
\end{verbatim}
So, the total number valid substrings is 1 + 1 + 1 + 1 + 2 + 2 = 8.

How to count? we use a variable to hold the appearing times of current number \texttt{count}. Initially we set it to 1. Then we start from the second character in the string (we set \texttt{count = 1} initially, so the first character in the string has been counted for. Also, we don't need to keep record of which character the counting corresponds to, because all we need to track is the breakpoint, where two characters differ from each other).

Start from the second character, and go through the string. If current character is different from the previous character, a breakpoint has been reached. We need to store the current counting to the list, and reset the count to 1 (which corresponds to the current character). By this means, we can't add the last character's data to the list. We do this by adding the \texttt{count} to the list after the iterative for loop (because \texttt{count} is now holding data corresponding to the last character in string).

The solution is leet code has another way to count (which is better).

After we get the list \texttt{lengths}, we can find smaller value for \texttt{(lengths[0], lengths[1])}, \texttt{(lengths[1], lengths[2])}, \ldots{}, \texttt{(lengths[n - 1], lengths[n])}
\subsubsection{Count total number on the fly}
\label{sec:orgfdb4e9d}
There is a way to get the final number of valid substrings without using extra space. It is similar with the above analysis. But we don't use a list to hold the length info of each single number substring.

We can calculate the number of valid substrings as soon as we get the length of adjacent 1-substring and 0-substring. So we use \texttt{prev} and \texttt{cur} to hold the length of previous substring and current substring (the previous substring is composed of character different from the current substring. If previous substring is 111.., the current substring is 000\ldots{}). 

Just like the second analysis, when we go througiteratingh the string, if a breakpoint is found, we update the final result (the number of valid substrings) by \texttt{min(prev, cur)}. Then, we update \texttt{prev} and \texttt{cur}: \texttt{prev = cur}, \texttt{cur = 1}. This is because, the moment we found a breakpoint, our current sequence becomes the previous, and we have to start counting occurance of the real current sequence.

After the iteration, we still need to add \texttt{min(prev, cur)} to the final answer as this is not included during the iteration (go through the for loop manually and you'll understand).

\subsection{Solution}
\label{sec:org98ecb18}
\subsubsection{Python}
\label{sec:org496a0a6}
\paragraph{count meta-strings}
\label{sec:orgeeaf625}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
# count meta-substring
# a meta-substring is the substring that each 0 and 1 are grouped together
# for example, for an input '00101000111100101'
# you have following meta-substrings
# '001'
# '10'
# '01'
# '1000'
# '0001111'
# '111100'
# '001'
# '10'
# '01'
# the number of valid substring is the min of number of 1s or 0s
class Solution:
    def countBinarySubstrings(self, s: str) -> int:
	num_first = []
	num_second = []
	result = 0

	num_first.append(s[0])

	for i in range(1, len(s)):
	    if len(num_second) == 0 and s[i] == num_first[0]:
		num_first.append(s[i])

	    elif s[i] != num_first[0]:
		num_second.append(s[i])

	    elif s[i] == num_first[0]:  # another un-grouped num_first occured, we have to stop here
		result += min(len(num_first), len(num_second))
		num_first = num_second[:]
		num_second.clear()
		num_second.append(s[i])

	result += min(len(num_first), len(num_second))

	return result

\end{minted}
\paragraph{count length of single number substring}
\label{sec:orgc885ef0}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
class Solution:
    def countBinarySubstrings(self, s: str) -> int:
	count = 1
	lengths = []
	ans = 0

	for i in range(1, len(s)):
	    if s[i - 1] != s[i]:
		lengths.append(count)
		count = 1
	    else:
		count += 1

	lengths.append(count)

	for i in range(len(lengths) - 1):
	    ans += min(lengths[i], lengths[i + 1])

	return ans
\end{minted}
\paragraph{count the total number on the fly}
\label{sec:org33ee58d}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
class Solution:
    def countBinarySubstrings(self, s: str) -> int:
	# prev: occuring times of previous num
	# cur: occuring times of current num
	ans, prev, cur = 0, 0, 1
	for i in range(1, len(s)):
	    if s[i] != s[i - 1]:
		ans += min(prev, cur)
		prev, cur = cur, 1
	    else:
		cur += 1

	ans += min(prev, cur)

	return ans

\end{minted}
\subsection{todos [2/3]}
\label{sec:org425be10}
\begin{itemize}
\item[{$\boxtimes$}] write down your analysis and Solution
\item[{$\square$}] time complexity analysis
\item[{$\boxtimes$}] check solution page and re-implement them
\begin{itemize}
\item[{$\boxtimes$}] Group by character
\item[{$\boxtimes$}] Linear scan
\end{itemize}
\end{itemize}
\section{739. Daily Temperature}
\label{sec:org90a9d84}
\subsection{Problem Statement}
\label{sec:orgbe48098}
\href{https://leetcode.com/problems/daily-temperatures/}{Link}
\subsection{Analysis}
\label{sec:org18fe17b}
\subsubsection{Brutal force (time limit exceeded)}
\label{sec:orge5ac8b6}
This solution is not accepted due to high time complexity. For each temperature, we scan the rest temperatures and find out the first one that is higher than it, then we compute the distance between these two. If none found, the distance is set to 0.

The time complexity is \(O(N^2)\).
\subsubsection{Record information (time limit exceeded)}
\label{sec:org8b351fd}
In the brutal force, we have missed much information. We can, however, use an initial scan to hold the information that the indexes of temperatures that are higher than a certain temperature. We do it as follows:

Declare a 2D array temp[i][j], there are 71 entrys of temp[i], corresponding to the temperature range[30, 100]. Each temp[i] is a vector of int, which stores the index of temperatures in T[] that are higher than value i.

After we obtain such 2D array, we scan T, for each encountered temperature (T[i]), we traverse temp[T[i]], temp[T[i]] is a vector holding indexes that has higher temperature than T[i], we compare each temp[T[i]][j], and find out the first index that temp[T[i]][j] > i, the distance between these two are the value we are looking for. If none exist, the value should be 0.

In implementation, we only allocate 71 slots for temp[][] to record temperatures. So the relation between index and temperature should be:
\begin{verbatim}
index       temperature
  0             30
  1             31
       ......
  71            100  
\end{verbatim}

This solution is also very slow. The time complexity for building the 2D array is \(O(71N)\), the time complexity for searching appropriate index is unfortunately, still \(O(N^2)\) for extreme cases.

One point we can optimize is when we searching the 2D array, we use binary search instead of linear search. This can increase the speed to an acceptable range (be accepted as a solution), but it is still \textbf{VERY SLOW}. The time complexity of this part using binary search is: \(N\log{N}\).

\subsection{Solution}
\label{sec:orgbfb0d21}
\subsubsection{C++}
\label{sec:org17158f6}
\paragraph{brutal force (time limit exceeded)}
\label{sec:orgd6f642a}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
vector<int> dailyTemperatures(vector<int>& T) {

  vector<int> counts;
  int count;

  for (int i = 0; i < T.size(); i++) {
    count = 0;

    for (int j = i + 1; j < T.size(); j++) 
      if (T[j] > T[i]) {
	count = j - i;
	break;
      }

    counts.push_back(count);
  }

  return counts;

}

\end{minted}
\paragraph{record information (binary search, accepted, very slow)}
\label{sec:orgedec1c8}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
vector<int> dailyTemperatures(vector<int>& T) {
  // build the temp[][] 2D record array 
  vector<vector<int>> temp(71);
  for (int i = 0; i < T.size(); i++)
    for (int j = 0; j < T[i] - 30; j++)
      temp[j].push_back(i);

  // find out answer
  vector<int> ret(T.size());
  int count;

  for (int i = 0; i < ret.size(); i++) {
    count = 0;

    for (int j = 0; j < temp[T[i] - 30].size(); j++)
      if (i < temp[T[i] - 30][j]) {
	count = temp[T[i] - 30][j] - i;
	break;
      }
    ret[i] = count;
  }

  return ret;
}

\end{minted}

\subsection{todos [2/4]}
\label{sec:orgccf2413}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\boxtimes$}] time complexity analysis of your own solution
\item[{$\square$}] check solution/discussion page for more ideas, implement them, and write down corresponding analysis (including time and space complexity analysis
\begin{itemize}
\item[{$\square$}] next array
\item[{$\square$}] stack
\end{itemize}
\item[{$\square$}] generalize this problem
\end{itemize}
\section{771. Jewels and Stones}
\label{sec:org66c5956}
\subsection{Problem Statement}
\label{sec:org41df816}
\href{https://leetcode.com/problems/jewels-and-stones/}{Link}
\subsection{Analysis}
\label{sec:org7ce21d2}
\subsubsection{Brutal force}
\label{sec:org6b747b0}
\subsection{Solution}
\label{sec:orgb631997}
\subsubsection{C++}
\label{sec:org56b663a}
\paragraph{\(N^2\) Time (96.35\%) Space (79.64\%)}
\label{sec:org8b0cbb3}
\begin{minted}[linenos,firstnumber=1,breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int numJewelsInStones(string J, string S) {
    int numJewl = 0;
    for (auto s : S)
      if (isJewels(s, J))
	numJewl++;
    return numJewl;
  }

  bool isJewels(char s, string J) {
    for (auto j : J)
      if (s == j)
	return true;

    return false;
  }
};
\end{minted}
\subsection{todos [0/4]}
\label{sec:org860046d}
\begin{itemize}
\item[{$\square$}] write down your own solution and analysis
\item[{$\square$}] check solution and discussion for other ideas
\item[{$\square$}] implement other ideas, write down analysis
\item[{$\square$}] generalize this problem
\end{itemize}
\section{804. Unique Morse Code Words}
\label{sec:orgaac6573}
\subsection{Problem Statement}
\label{sec:org36b679a}
\href{https://leetcode.com/problems/unique-morse-code-words/}{Link}
\subsection{Analysis}
\label{sec:orgc639f8c}
\subsubsection{Hash Table}
\label{sec:org6028831}
Generally speaking, this problem wants to find how many unique elements in a collection of elements. We can use a hash table to get this done. Since we don't need ordering, we can use an unordered\_set.

To solve this problem, simplily translate the word first, then insert the translated Mores phrase into the hash table. \texttt{unordered\_set} in C++ doesn't allow duplicates, so if an element that is identical to an element inside the hash table, it will not be inserted. At the end, we just simplily return the size of the hash table.
\subsection{Solution}
\label{sec:orgb1f45f9}
\subsubsection{C++}
\label{sec:orge71119c}
\paragraph{hash Table}
\label{sec:org9394661}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int uniqueMorseRepresentations(vector<string>& words) {
    // create a vector of string containing the mapping of letter to Morse code 
    vector<string> letter_M{".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};

    // go over the input list of words and translate each word into Morse code
    string translate;
    unordered_set<string> records;

    for (const string& word : words) {
      translate.clear();

      for (char ch : word)
	translate += letter_M[ch - 97];

      records.insert(translate);
    }


    // return the size of the hash table 
    return records.size();

  }
};

/*cases: 
["gin", "zen", "gig", "msg"]

["sut", "zen", "gin", "bmf", "sot", "xkf", "qms", "hin", "rvg", "apm"]

*/
\end{minted}
\subsection{todos [1/3]}
\label{sec:orge4526c7}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\square$}] check discussion page for more space-efficient solution
\item[{$\square$}] try to implement and write down your update
\end{itemize}
\section{824. Goat Latin}
\label{sec:orgf3fa2f2}
\subsection{Problem Statement}
\label{sec:orgcffab6d}
\href{https://leetcode.com/problems/goat-latin/}{Link}
\subsection{Analysis}
\label{sec:orgb5e9a60}
\subsubsection{Modify the word directly}
\label{sec:orgd3ec269}
The problem has already given the instructions on how to modify the word.
\subsection{Solution}
\label{sec:org016b633}
\subsubsection{Python}
\label{sec:org54f3959}
\paragraph{modify the word directly}
\label{sec:orgc8cfa46}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
class Solution:
    def toGoatLatin(self, S: str) -> str:
	words = S.split()

	vowel = ('a', 'e', 'i', 'o', 'u')

	for i in range(len(words)):

	    if words[i][0].lower() in vowel:
		words[i] += "ma"
	    else:
		words[i] = words[i][1:] + words[i][0] + "ma"

	    for j in range(i + 1):
		words[i] += 'a'

	    words[i] += ' '

	words[-1] = words[-1][:-1]

	return ''.join(words)
\end{minted}
\subsection{todos [1/6]}
\label{sec:org5d0b0b9}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\square$}] time complexity analysis of your own solution
\item[{$\square$}] check solution/discussion page for more ideas
\item[{$\square$}] implement them, and write down corresponding analysis
\item[{$\square$}] time complexity of these Solutions
\item[{$\square$}] generalize this problem
\end{itemize}
\section{929. Unique Email Addresses}
\label{sec:orgad34c21}
\subsection{Problem Statement}
\label{sec:org2d87a40}
\subsection{Analysis}
\label{sec:orgac581b6}
\subsubsection{Python string manipulation}
\label{sec:org6346d39}
Use member functions provided by python string class to solve this problem.
\begin{enumerate}
\item split the string into two parts: before the @ and after the @
\item remove all '.'  and characters after '+' in the first part
\item add modified first part + @ + second part (domain part) in a set. Set is used to keep uniqueness of the email address
\item After analyzing all the strings in the given list, return the length of the set, which is the number of unique email address
\end{enumerate}
\subsection{Solution}
\label{sec:org39f0074}
\subsubsection{Python}
\label{sec:org1d46089}
\paragraph{use string member functions}
\label{sec:org285ddc5}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
class Solution:
    def numUniqueEmails(self, emails: List[str]) -> int:
	unique_emails = set()

	for email in emails:
	    email_list = email.split('@')
	    first = email_list[0].replace('.', '').split('+')[0]
	    unique_emails.add(first + '@' + email_list[1])

	return len(unique_emails)
\end{minted}
\subsection{todos [1/2]}
\label{sec:orgd12e6ba}
\begin{itemize}
\item[{$\boxtimes$}] write down your solution and analysis
\item[{$\square$}] read discussion page
\end{itemize}
\section{938. Range Sum of BST}
\label{sec:org0219405}
\subsection{Problem Statement}
\label{sec:org4b5bf90}
\href{https://leetcode.com/problems/range-sum-of-bst/}{Link}
\subsection{Analysis}
\label{sec:org284ffcd}
\subsubsection{Recursion (brutal and stupid)}
\label{sec:org58599df}
The tree is composed of left subtree, the node, and the right subtree. The base case is when the root is pointing to \texttt{nullptr}, in this case, we should return 0.

Thus, we call the function itself to find out the range sum of left subtree and right subtree first, then we check the \texttt{node->val}. If it is within the range, we add it to the whole sum, otherwise, we ignore it.

This algorithmm is easy to follow, but it does a lot of unnecessary work (didn't use the fact that this is a binary search tree, which satisfies: \texttt{node->left->val < node->val < node->right->val}, given "the binary search tree is guaranteed to have unique values"). If \texttt{node->val} is smaller than \texttt{L}, then we have no reason to check \texttt{rangeSumBST(node->left, L, R)}, since any value contained in this branch of subtree is bound to be smaller than \texttt{node->val}, thus not within the range \texttt{[L, R]}. Similarliy if \texttt{node->val} is greater than \texttt{R}, we don't have to check \texttt{rangeSumBST(node->right, L, R)}. This thought gives a better recursion algorithm.
\subsubsection{DFS}
\label{sec:orgd469a83}
DFS allows us to traverse the tree in a deapth first manner (go deep first). It will eventually go over all the nodes one by one. We use a stack to perform the DFS, we also need an associative container to hold record of visited nodes. The basic steps is this:
\begin{enumerate}
\item create a stack and an unordered\_set
\item push the root (if it is not nullptr) into the stack
\item while the stack is not empty, we check the top node in the stack
\begin{itemize}
\item if the top node is a leaf, then we check its value (to see if it is within the range, so we can add it to the total sum); Then we pop it ()
\item if the top node is not a leaf, we check if its left node is visited, if not, we visit it by pushing its left child into the stack, and record this in the Unordered\_set, then we go to the next loop. If its left node was already visited, we check right child and do the same thing
\end{itemize}
\item if the top node has no unvisited child, we check its value to see if it satisfies the range, if so, we add it to the sum. Then, we pop it out of the stack, start next loop.
\end{enumerate}

By DFS, we can traverse the whole tree's each node in a depth-first manner. We can get the range sum along the way.

\subsection{Solution}
\label{sec:org4ac0cb6}

\subsubsection{C++}
\label{sec:orga847dbf}

\paragraph{recursion (stupid)}
\label{sec:orgee7a556}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int rangeSumBST(TreeNode* root, int L, int R) {
    // base case 
    if (root == nullptr)
      return 0;

    return (root -> val <= R && root -> val >= L ? root -> val + rangeSumBST(root -> left, L, R) + rangeSumBST(root -> right, L, R) : rangeSumBST(root -> left, L, R) + rangeSumBST(root -> right, L, R));
  }
};
\end{minted}

\paragraph{recursion (better)}
\label{sec:orgf94a28f}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  int rangeSumBST(TreeNode* root, int L, int R) {
    // base case 
    if (root == nullptr)
      return 0;

    if (root->val < L)
      return rangeSumBST(root -> right, L, R);

    if (root->val > R)
      return rangeSumBST(root->left, L, R);

    return root->val + rangeSumBST(root->left, L, R) + rangeSumBST(root->right, L, R);
  }
};
\end{minted}

\paragraph{DFS (slow, 5\% and 6\%)}
\label{sec:orgd301218}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:

  int rangeSumBST(TreeNode* root, int L, int R) {
    if (root == nullptr)
      return 0;

    int sum = 0;

    // use a set to keep track of visited nodes 
    unordered_set<TreeNode*> visited_nodes;
    // use a stack to do DFS
    stack<TreeNode*> nodes;
    nodes.push(root);

    while (!nodes.empty()) {
      // check if top node is leaf or not
      if (nodes.top()->left == nodes.top()->right) {
	if (nodes.top()->val >= L && nodes.top()->val <= R) {
	  sum += nodes.top()->val;
	  nodes.pop();
	  continue;
	}
      }

      // check if nodes.top() has unvisited child (first check left, then right)
      // if so, push it into the stack 
      // otherwise, calculate sum 
      if (nodes.top()->left != nullptr && visited_nodes.find(nodes.top()->left) == visited_nodes.end()) {
	visited_nodes.insert(nodes.top()->left);  // mark as visited 
	nodes.push(nodes.top()->left);
	continue;
      }

      if (nodes.top()->right != nullptr && visited_nodes.find(nodes.top()->right) == visited_nodes.end()) {
	visited_nodes.insert(nodes.top()->right);
	nodes.push(nodes.top()->right);
	continue;
      }

      // up to here, both child of the nodes.top() node has been visited
      // add to sum if nodes.top()->val satisfies the condition 
      if (nodes.top()->val >= L && nodes.top()->val <= R)
	sum += nodes.top()->val;

      nodes.pop();
    }

    return sum;

  }
};
\end{minted}

\subsection{todos [1/3]}
\label{sec:orgb72d23d}
\begin{itemize}
\item[{$\boxtimes$}] write down your analysis and solution (recursion and DFS)
\item[{$\square$}] check solution's DFS, study and re-implement
\item[{$\square$}] read discussion page, to gain more understanding of possible solution
\item[{$\square$}] re-implement and write down analysis
\end{itemize}
\section{1021. Remove Outermost Parenthese}
\label{sec:org66aeda0}
\subsection{Problem Statement}
\label{sec:orgc83f5e8}
\href{https://leetcode.com/problems/remove-outermost-parentheses/}{Link}
\subsection{Analysis}
\label{sec:org97189fb}
\subsubsection{Stack}
\label{sec:org45547df}
We have to first understand a valid parentheses string and a primitive valid parentheses string. This is similar with base of a vector space.

A valid parentheses string can be viewed as a string that has balanced parenthese (by saying balance, I mean the number of '(' and ')' are the same, also their appearing sequence matches). We can use a stack to check the validity of a parentheses string.

Given a string of parentheses, we go from the first character and moving forward, recording each encountered character to a temporary string. When we encounter the first ')' which makes all the previous parentheses characters forming a valid parentheses string, they will make a primitive valid parentheses string. Because it cann't be splitted any further. We can then store the temp to our result, removing the outer parentheses in the process.

In detail, we need to use three constructs to finish this job:
\begin{enumerate}
\item a stack used to determine if a valid parentheses string has been encountered.
\item a temp string used to record the sequence of characters before encountering a valid parentheses string.
\item a result string used to collect all temp strings (after the outter parentheses are removed)
\end{enumerate}

Steps:
\begin{enumerate}
\item construct two strings (\texttt{temp}, \texttt{result}) and one stack. The stack will be used to hold all '(' characters encountered.
\item traverse the string from the beginning
\item if we encounter a '(', push into the stack, also add this to temp (which will record the occuring sequence of the characters inside this primitive valid parentheses string)
\item if we encounter a ')', and we have more than one items in stack, we have not reached the end of the first valid parenthese string. We should add this to temp. Then we pop one item in the stack (so the most adjacent '(' is balanced by this ')')
\item if we encounter a ')' and we have only one item in stack, this is the ending ')' of the current primitive valid parentheses string. We pop the stack (so it is now empty and ready for the next recording). Then we traverse \texttt{temp} to store the sequence into the result. We start from \texttt{temp[1]}, because \texttt{temp[0]} is the starting '(' of the current primitive valid parentheses string, which we should trim off.
\end{enumerate}


\subsubsection{Two pointers}
\label{sec:org3b5efee}
\subsection{Solution}
\label{sec:orgbdba551}
\subsubsection{C++}
\label{sec:orgbbefef3}
\paragraph{Stack}
\label{sec:orgda9384a}
\begin{minted}[breaklines=true,breakanywhere=true]{c++}
class Solution {
public:
  string removeOuterParentheses(string S) {
    stack<char> ch_stack;
    string result;
    string temp;

    for (char ch : S) {
      if (ch == '(') {
	ch_stack.push(ch);
	temp += ch;
	continue;
      }

      if (ch == ')' && ch_stack.size() == 1) {
	ch_stack.pop();

	// record temp to result, not including the first '('
	for (int i = 1; i < temp.size(); i++)
	  result += temp[i];

	// clear temp cache 
	temp.clear();
	continue;
      }

      // if the current primitive valid parenthese not ending
      temp += ch;
      ch_stack.pop();

    }

    return result;
  }
};
\end{minted}
\subsection{todos [1/4]}
\label{sec:org0926db4}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution and analysis
\item[{$\square$}] read discussion, collect possible solution ideas
\item[{$\square$}] think about the possible solution, re-implement them
\item[{$\square$}] write down analysis for these other solutions
\end{itemize}
\section{1108. Defanging an IP Address}
\label{sec:org9ccd72b}
\subsection{Problem Statement}
\label{sec:org92ab3fe}
\href{https://leetcode.com/problems/defanging-an-ip-address/}{Link}
\subsection{Analysis}
\label{sec:org03f7966}
\subsubsection{Direct replace}
\label{sec:org098c9be}
Search the string, for each \texttt{'.'} encountered, replace it with \texttt{'[.]'}
\subsection{Solution}
\label{sec:org502f099}
\subsubsection{Python}
\label{sec:org6b1d5b7}
\paragraph{direct replace}
\label{sec:org315f95a}
\begin{minted}[breaklines=true,breakanywhere=true]{python}
class Solution:
    def defangIPaddr(self, address: str) -> str:
	return address.replace('.', '[.]')
\end{minted}
\subsection{todos [1/2]}
\label{sec:org171554a}
\begin{itemize}
\item[{$\boxtimes$}] write down your own solution
\item[{$\square$}] check discussion page
\end{itemize}
\end{document}
