#+STARTUP: indent
#+OPTIONS: H:6
#+LATEX_HEADER: \usepackage[margin=1in] {geometry}
#+LATEX_HEADER: \usepackage{parskip}

#+LATEX_HEADER: \linespread {1.5}
#+LATEX_HEADER: \setcounter{tocdepth} {6}
#+LATEX_HEADER: \setcounter{secnumdepth} {6}
#+LATEX_CLASS: book
#+LATEX_CLASS_OPTIONS: [12pt]
* C Basics
***** Some Facts
Assignments associate from right to left.


***** ~printf()~ formatting
Check p26-p27 of the textbook.

Use ~%~ with symbols to print the variables in different format.
Example:
#+begin_src c
printf("%c", a)  //print a in format of character
printf("%s", a)  //print a in format of character string
printf("%nc", a)  //print a in format of character, using a character width of size n (at least)
printf("%f", a)  //print a in format of float
printf("%nf", a)  //print a in format of float, using a width of size n
printf("%n.0f", a)  //print a in format of float, using a character width of size n, with no decimal point and no fraction digits
printf("%n.mf", a)  //print a in format of float, using a character width of size n, with decimal point and m fraction digits
printf("%0.mf", a)  //print a in format of float, with decimal point and m fraction digits. The width is not constrained.
printf("%d", a)  //print a in format of integer
printf("%o", a)  //print a in format of octal integer
printf("%x", a)  //print a in format of hexadecimal integer
#+end_src
***** Symbolic Constants
A ~#define~ line defines a symbolic name or symbolic constants to be a particular string of characters. You use it like: ~#define~ /name/ /replacement text/. You put this at the head of your code (outside scope of any function to make it globally). Example:
#+begin_src c
#include <stdio.h>

#define LOWER 0
#define UPPER 300
#define STEP 20

int main() {
  
  for (int i = LOWER; i <= UPPER; i += STEP) {
    printf("%5d\t%20f", i, 5 * (i - 32) / 9.0);
    printf("\n");
  }
  
  return 0;
}
#+end_src
Pay attention that symbolic name or symbolic constants are not variables. They are conventionally written in upper case. No semicolon at the end of a ~#define~ line.
***** Character Input and Output
- ~getchar()~: it reads the next input character from a text stream and returns that (from the buffer?).
- ~putchar()~: it prints a character each time it is called and passed a char into.

Pay attention that a character written between single quotes represents an integer value equal to the numerical value of the character in the machine's character set. This is called a character constant. For example, ~'a'~ is actually ~97~.
***** Arrays
The syntax is similar with C++. For example, to define an array of integers with a size of 100, you do:
#+begin_src c
int nums[100];
#+end_src
Remember to initialize each slot:
#+begin_src c
for (int i = 0; i < 100; i++)
  nums[i] = 0;
#+end_src
***** Global Variables
You can declare global variables outside of main.
