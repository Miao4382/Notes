#+STARTUP: indent
#+OPTIONS: H:6
#+LATEX_HEADER: \usepackage[margin=1in] {geometry}
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \linespread {1.5}
#+LATEX_HEADER: \setcounter{tocdepth} {6}
#+LATEX_HEADER: \setcounter{secnumdepth} {6}
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [12pt]

* Generals
** Some Facts
Below are some general facts about C language.
- assignments associate from right to left.
- arithemetic operators associate left to right
- relational operators have lower precedence than arithmetic operators
- expressions connected by ~&&~ or ~||~ are evaluated left to right. ~&&~ has a higher precedence than ~||~, both are lower than relational and equality operators. (higher than assignment operators?)
- printable characters are always positive
- The standard headers ~<limits.h>~ and ~<float.h>~ contain symbolic constants for all of the sizes of basic data types, along with other properties of the machine and compiler.
- a leading 0 (zero) on an integer constant means octal
- a leading ~0x~ or ~0X~ (zero x) means hexadecimal.
- you can use escape sequence to represent number. Check it at p51. The complete set of escape sequences are in p52.
- ~strlen()~ function and other string functions are declared in the standard header ~<string.h>~.
- external and static variables are initialized to zero by default.
- for portability, specify ~signed~ or ~unsigned~ if non-character data is to be stored in ~char~ variables. (p58)
- to perform a type conversion:
  #+begin_src c
  double a = 2.5;
  printf("%d", (int) a);  
  #+end_src
  result will be ~2~.
- unary operator associate right to left (like ~*~, ~++~, ~--~)
- strcpy() function in C needs a pointer to a character array! A pointer to character will cause segmentation fault

Place holder.

** headers
- ~<stdio.h>~: contains input/output functions
- ~<ctype.h>~: some functions regarding to characters
  
** ~printf()~ formatting
Check p26-p27 of the textbook.

Use ~%~ with symbols to print the variables in different format.
Example:
#+begin_src c
printf("%c", a)  //print a in format of character
printf("%s", a)  //print a in format of character string
printf("%nc", a)  //print a in format of character, using a character width of size n (at least)
printf("%f", a)  //print a in format of float
printf("%nf", a)  //print a in format of float, using a width of size n
printf("%n.0f", a)  //print a in format of float, using a character width of size n, with no decimal point and no fraction digits
printf("%n.mf", a)  //print a in format of float, using a character width of size n, with decimal point and m fraction digits
printf("%0.mf", a)  //print a in format of float, with decimal point and m fraction digits. The width is not constrained.
printf("%d", a)  //print a in format of integer
printf("%o", a)  //print a in format of octal integer
printf("%x", a)  //print a in format of hexadecimal integer
#+end_src
** Character Input and Output
- ~getchar()~: it reads the next input character from a text stream and returns that (from the buffer?).
- ~putchar()~: it prints a character each time it is called and passed a char into.

Pay attention that a character written between single quotes represents an integer value equal to the numerical value of the character in the machine's character set. This is called a character constant. For example, ~'a'~ is actually ~97~.
** Arrays
The syntax is similar with C++. For example, to define an array of integers with a size of 100, you do:
#+begin_src c
int nums[100];
#+end_src
Remember to initialize each slot:
#+begin_src c
for (int i = 0; i < 100; i++)
  nums[i] = 0;
#+end_src

You can also to use assignment operator and ~{ }~ to initialize the array when defining. For example, the following C-string is initialized when being defined:
#+begin_src c
int main() {
  char s[] = {'a', 'b', 'c' };
  printf("%s", s);
  return 0;
}
#+end_src
** Enumeration constant
An enumeration is a list of constant integer values. For example:
#+begin_src c
enum boolean { NO, YES };
#+end_src
The first name in an ~enum~ has value 0, the next 1, and so on, unless explicit values are specified:
#+begin_src c
enum boolean { YES = 1, NO = 0 };
#+end_src

If not all values are specified, unspecified values continue the progression from the last specified value:
#+begin_src c
enum months { JAN = 1, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC };
// FEB is 2, MAR is 3, etc.
#+end_src

Names in different enumerations must be distinct. Values need not be distinct in the same enumeration. Enumeration works like using ~#define~ to associate constant values with names:
#+begin_src c
#define JAN 1
#define FEB 2
// etc
#+end_src
** type-cast an expression
Explicit type conversions can be forced ("coerced") in any expression. For example:
#+begin_src c
int main() {
  int n = 2;
  printf("%f", (float) n);
  return 0;
}
#+end_src
In the above example, when being printed, the type of ~n~ has been modified to ~float~. Notice that ~n~ itself is not altered. This is called a /cast/, it is an unary operator, has the same high precedence as other unary operators.
** Bitwise operators
p62

There are 6 bitwise operators for bit manipulation. They may be applied to integral operands only.

They are:
- ~&~  : bitwise AND
- ~|~  : bitwise inclusive OR
- ~^~  : bitwise exclusive OR
- ~<<~ : left shift
- ~>>~ : right shift
- =~=  : one's complement (unary)

The precedence of the bitwise operators ~&~, ~^~ and ~|~ is lower than ~==~ and ~!=~.
** Operators can be used with assignment operators
p64

~+, -, *, /, %, <<, >>, &, ^, |~
** Symbolic Constants
A ~#define~ line defines a symbolic name or symbolic constants to be a particular string of characters. You use it like: ~#define~ /name/ /replacement text/. You put this at the head of your code (outside scope of any function to make it globally). Example:
#+begin_src c
#include <stdio.h>

#define LOWER 0
#define UPPER 300
#define STEP 20

int main() {
  
  for (int i = LOWER; i <= UPPER; i += STEP) {
    printf("%5d\t%20f", i, 5 * (i - 32) / 9.0);
    printf("\n");
  }
  
  return 0;
}
#+end_src
Pay attention that symbolic name or symbolic constants are not variables. They are conventionally written in upper case. No semicolon at the end of a ~#define~ line.
* Functions and Program Structure
** External Variables
If an external variables is to be referred to before it is defined, or if it is defined in a different source file from the one where it is being used, then an ~extern~ declaration is mandatory. For example, a function using external variables in a different source file can declare these variables in following manner:
#+begin_src c
int addNum(int a) {
  extern int ADDAMOUNT;  // variable ADDAMOUNT is in different source file

  return a + ADDAMOUNT;
}
#+end_src
Array sizes must be specified with the definition, but are optional with an ~extern~ declaration.
** The C Preprocessor
*** File Inclusion
*** Macro Substitution
**** General
A definition of a macro Substitution has the form:
#+begin_src c
#define name replacement_text
#+end_src
After this line, subsequent occurrences of the token ~name~ will be replaced by the ~replacement_text~. ~name~ has the same form as a variable name (so no white space is allowed between characters), ~replacement_text~ is arbiturary.

~replacement_text~ is the rest of the line. If you need long definition, you can place a ~'\'~ at the end of each line to be continued. For example:
#+begin_src c
#include <stdio.h>
#define say_hi_5_times  (for (int i = 0; i < 5; i++) \
                          printf("Hi\n");)

int main() {
  say_hi_5_times
  return 0;
}
#+end_src
This program will print ~"Hi"~ 5 times. Notice that there is no ~;~ after the macro, this is because ~say_hi_5_times~ calls for a macro substitution, every occurrence of ~say_hi_5_times~ will be replaced by:
#+begin_src c
for (int i = 0; i < 5; i++)
  printf("Hi\n");
#+end_src
Thus, after preprocessing, the code is actually:
#+begin_src c
#include <stdio.h>

int main() {
  for (int i = 0; i < 5; i++)
    printf("Hi\n");
  for (int i = 0; i < 5; i++)
    printf("Hi\n");
  for (int i = 0; i < 5; i++)
    printf("Hi\n");
  for (int i = 0; i < 5; i++)
    printf("Hi\n");
  for (int i = 0; i < 5; i++)
    printf("Hi\n");
    
  return 0;
}
#+end_src
Notice: you can use ~'\'~ inside the parenthese.

**** Arguments
It is possible to define macros with arguments, so the replacement text can be different for different calls of the macro. For example:
#+begin_src c
#define max(A, B) ((A) > (B) ? (A) : (B))
#+end_src
Do not treat it as function call, there is nothing relating to function happening here. It is still a macro substitution. Each occurrence of a formal parameter (here ~A~ or ~B~) will be replaced by the corresponding actual argument. For example, if ~max(p+q, r+s)~ appeared, after preprocessing, this line will become:
#+begin_src c
((p+q) > (r+s) ? (p+q) : (r+s))
#+end_src

You can even put function names in the parameter:
#+begin_src c
#include <stdio.h>
#define plus(A, B) (A)() + (B)()

int one() {
  return 1;
}

int two() {
  return 2;
}

int main() {
  printf("result: %d", plus(one, two));
  return 0;
}
#+end_src
The output is: ~result: 3~
**** Pitfalls
There are pitfalls hidden in the macro substitution. For example, in the ~max()~ macro:
#+begin_src c
#define max(A, B) ((A) > (B) ? (A) : (B))
#+end_src
each expression is evaluated twice. Thus usages like ~max(i++, j++)~ will increment the larger value twice (first in the comparing part, next in the "returning" part). User of ~max(i++, j++)~ may expect single increment.

An other example of pitfall is
#+begin_src c
#define square(x) x * x
#+end_src
Notice there is no parenthese, so if we have an expression like ~square(a + 1)~, after macro substitution, the actual expression is:
#+begin_src c
a + 1 * a + 1
#+end_src
which is not ~(a + 1) * (a + 1)~. So, make sure to use parenthese to enclose your parameters to avoid such mistake. In the above example, ~square(x)~ should be:
#+begin_src c
#define square(x) ((x) * (x))
#+end_src

*** Conditional Inclusion
* Pointers and Arrays
** Command-line Arguments
p128 in CPL.

We can pass command-line arguments or parameters to a program when it begins executing. An example is the echo program. On the command prompt, you enter ~ehco~, followed by a series of arguments:
#+BEGIN_EXAMPLE
$ echo hello world
#+END_EXAMPLE
then press enter. The command line window will repeat the inputed arguments:
#+BEGIN_EXAMPLE
$ echo hello world
$ hello world
#+END_EXAMPLE
The two strings ~"hello"~ and ~"world"~ are two arguments passed in echo program.

Basically, when ~main()~ is called, it is called with two arguments: ~argc~ and ~argv~.
- ~argc~: stands for argument count. It is the number of command-line arguments when the program was invoked (i.e. how many strings are there in the line that invoked the program). In the above echo example, ~argc == 3~, the three strings are: "echo", "hello" and "world", respectively.
- ~argv~: stands for argument vector. It is a pointer to an array of character strings that contain the actual arguments, one per string. You can imagine when you type in command line to invoke a program, what you typed in was stored somewhere in an array of character strings. Additionally, the standard requires that ~argv[argc]~ be a null pointer. In the echo example, you typed "echo hello world", and following array of characters was stored:
  #+BEGIN_EXAMPLE
  ["echo", "hello", "world", 0]
  #+END_EXAMPLE

*** Example: ~echo~
Knowing this, we can write a program that mimic the ~echo~ function: re-print what we typed in when we invoke the program to terminal:
#+begin_src c
#include <stdio.h>

int main(int argc, char* argv[]) {
  while (*(++argv))
    printf("%s%s", *argv, *(argv + 1) ? " " : "");  // the second %s is for the space
  
  printf("\n");
  
  return 0;
}
#+end_src

*** Example: ~pattern_finding~
This program will try to find any lines in the input buffer that contains the keyword passed in when invoking it. For example, in command line prompt:
#+BEGIN_EXAMPLE
$ pattern_finding love < text.txt
#+END_EXAMPLE
it will print all lines that contain ~love~ to the terminal.

The program uses ~strstr()~ to search the existence of a certain keyword in target string. We also write a ~getline()~ function to get one single line from input buffer (using ~getchar()~). Pay attention that in the new C library (~stdio.h~), a ~getline()~ function has been added. So we rename our function to ~getlines()~. The code is as follows:
#+begin_src c
#include <stdio.h>
#include <string.h>
#define MAXLINE 1000

int getlines(char* line, int max);

//find: print lines that match pattern from 1st arg 
int main(int argc, char* argv[]) {
  char line[MAXLINE];  // used to hold a line of string
  int found = 0;
  
  if (argc != 2)
    printf("Usage: find pattern\n");
  else
    while (getlines(line, MAXLINE) > 0)
      if (strstr(line, argv[1]) != NULL) {
        printf("No.%d: %s", ++found, line);
      }
  
  return found;
}

int getlines(char* line, int max) {
  char ch;
  
  while (--max > 0 && (ch = getchar()) != EOF && ch != '\n') {
    *(line++) = ch;
  }
  
  if (ch == '\n')
    *(line++) = ch;  // no need to worry about not enough space, since if ch == '\n', it is not stored in line yet, because the loop was not executed
  *line = '\0';
  
  if (ch == EOF)
    return -1;
  
  return 1;
}
#+end_src

*** Optional arguments example: ~pattern_finding~ extended
Now we extend our ~pattern_finding~ program so it can accept optional arguments. A convention for C programs on UNIX systems is that an argument that begins with a minus sign introduces an optical flag or parameter. Optional arguments should be permitted in any order, they can also be combined (a minus sign with two or more optional arguments, without space between each other).

There is no magic about optional arguments. They are collected as strings in ~argv[]~ when the program is invoked, just like anyother strings occured when invoking the function. We extend the ~pattern_finding~ program to include support for two optional arguments:
1. -x: print lines that doesn't contain the target pattern;
2. -n: in addition to print lines, the program will also print the corresponding line number before the line.
So, the program can be invoked in following way:
#+BEGIN_EXAMPLE
$ pattern_finding -n -x keyword < text.txt
#+END_EXAMPLE
in this case, when ~main()~ is called, ~argc == 4~, ~*argv == {"pattern_finding", "-n", "-x", "keyword"}~. ~< text.txt~ is just redirect ~stdin~ to the text.

Or, we can combine the two optional arguments:
#+BEGIN_EXAMPLE
$ pattern_finding -xn keyword < text.txt
#+END_EXAMPLE
in this case, when ~main()~ is called, ~argc == 3~, ~*argv == {"pattern_finding", "-xn", "keyword"}~.

Thus, we have to write code to analyze argument strings that has ~"-xxx"~ form. Generally, we keep a list of flags inside the program. If we encountered any optional argument in the string, we can set the corresponding flag to true.

The code and explanation is as follows:
#+begin_src c
#include <stdio.h>
#include <string.h>
#define MAXLINE 1000

int getlines(char* line, int max);

//find: print lines that match pattern from 1st arg 
// with optional arguments enabled
int main(int argc, char* argv[]) {
  char line[MAXLINE];  // temporary container to hold line read from buffer
  char c;  // to check optional arguments 
  
  int line_num = 0;  // record the number of line                                                             
  int except = 0;  // flag of optional argument x, if this is true, print lines that doesn't have pattern  
  int number = 0;  // flag for optional argument n , if this is true, print the corresponding line number
  int found = 0;
  
  
  // check inputted arguments and set flag accordingly
  // use prefix to skip the first argv (which is the name of the function)
  while (--argc > 0 && (*++argv)[0] == '-')  // outter while loop check each "-xxx" styled optional argument 
    while (c = *++argv[0]) {  // inner while loop check each char in the "-xxx" styled argument
      switch (c) {
      case 'x':
        except = 1;
        break;
      case 'n':
        number = 1;
        break;
      default:
        printf("find: illegal option %c\n", c);
        argc = 0;  // this will terminate the program
        found = -1;
        break;
      }
    }
    
  if (argc != 1)  //we should have only one argument at this point, which is the pattern we are going to find. All optional arguments have been examed by the previous while loop 
    printf("Usage: find -x -n pattern\n");  // print a message showing how to use this program
  else
    while (getlines(line, MAXLINE) > 0) {
      line_num++;  // update the line number
      
      /*Notes: 
        Print the line based on value of variable except and the found result.
        To print a line, the truth value of found and except should be different. When except = 1, we print lines that not found, so found == 0;
        When except = 0, we print lines that are found, so found == 1;
      */
      if ((strstr(line, *argv) != NULL) != except) {
        if (number)  // if the number flag is true, we print the line number 
          printf("%d", line_num);
        printf("%s", line);
        found++;
      }
      
    }
    
  return found;
    
}

int getlines(char* line, int max) {
  char ch;
  
  while (--max > 0 && (ch = getchar()) != EOF && ch != '\n') {
    *(line++) = ch;
  }
  
  if (ch == '\n')
    *(line++) = ch;  // no need to worry about not enough space, since if ch == '\n', it is not stored in line yet, because the loop was not executed
  *line = '\0';
  
  if (ch == EOF)
    return -1;
  
  return 1;
}
#+end_src

** Pointers to Functions
It is possible to define pointers to functions, which can be assigned, placed in arrays, passed to functions, returned by functions, and so on.

To declare a pointer to a function, you write:
#+BEGIN_EXAMPLE
return_type (*ptr_name)(parameter1_type, parameter2_type, ...)
#+END_EXAMPLE
Explanation:
- ~return_type~: the return type of the function this pointer pointing to.
- ~ptr_name~: the name of the pointer variable
- ~parameter_type~: the type of the function this pointer referring to.

Example:
#+begin_src c
#include <stdio.h>

int add(int a, int b) {
  return a + b;
}

int main() {
  int (*a)(int, int);
  a = &add;
  printf("%d\n", (*a)(2, 3));
}
#+end_src
When calling the function pointer, you have to use parenthese to enclose ~*~ and pointer name. Use ~&~ and function name to get the "address" of the function.

*** Example: qsort() which takes a comp() function pointer
(Example 5-11).

A quick sort function which takes a function pointer to be used in its body to sort is as follows:
#+begin_src c
void qsorts(void* v[], int left, int right, int (*comp)(void*, void*)) {
  int last;
  
  if (left >= right)
    return;
  
  swap(v, left, (left + right) / 2);
  last = left;
  
  for (int i = left + 1; i <= right; i++)
    if ((*comp)(v[i], v[left]) < 0)
      swap(v, i, ++last);
  
  swap(v, left, last);
  qsorts(v, left, last - 1, comp);
  qsorts(v, last + 1, right, comp);
}
#+end_src

* Input and Output

** Standard Input and Output
*** Input redirection
In many environments, a file may be substituted for the keyboard as the source of standard input by using the ~<~ convention for input redirection. For example, we have following code:
#+begin_src c
#include <stdio.h>

int main() {
  char c;
  while ((c = getchar()) != EOF)
    printf("%c", c);

  return 0;
}
#+end_src
When we call the program, we use ~<~ to redirect standard input with a file:
#+BEGIN_EXAMPLE
$ ./a.out < out.txt
#+END_EXAMPLE
the effect of this program is to print all content in ~out.txt~ to standard output.
*** Output redirection
We can also redirect a program's standard output to a file. We use ~>~ convention to do it, the syntax is:
#+BEGIN_EXAMPLE
$./a.out > result.txt
#+END_EXAMPLE
in this way, all standard output of ~a.out~ will be redirected to file ~result.txt~. The file will be created if not exist.

Output produced by ~putchar()~ and ~printf()~ are the same, they will both finds its way to the standard output.
*** Pipe between two programs
It is possible to use one program's standard output as another program's standard input:
#+BEGIN_EXAMPLE
$./prog1 | ./prog2
#+END_EXAMPLE
the above line puts the standard output of ~prog1~ into the standard input of ~prog2~.

*** Include header file
When you include a file with brackets ~<>~, the compiler will search the header in a standard set of places (typically: ~/usr/include~).

*** Macros in standard library
"Functions" like ~getchar~ and ~putchar~ in ~<stdio.h>~, and ~tolower~ in ~<ctype.h>~ are often macros, thus avoiding the overhead of a function call per character.

*** Formatted output: printf
p167 on textbook. A table of ~printf()~'s conversion characters are shown in table 7-1 in the book (p168).

A width or precision may be specified as ~.*~, the value is computed by converting the next argument (which must be an ~int~). For example:
#+begin_src c
int main(int argc, char* argv[]) {
  char* s = "abcdefg";
  int length = 4;
  printf("%.*s\n", length, s);
  return 0;
}
#+end_src
the above program printed the first ~length~ characters in string ~s~. Don't forget the dot before ~*~.

*** Function ~sprintf()~
This function does the same conversions as ~printf()~. It accepts a ~char* string~ argument, and will place the result in ~string~ instead of to the standard output. ~string~ must big enough to receive the result.

** Variable-length Argument Lists
This section will use an implementation of a minimal version of ~printf()~ to show how to write a function that processes a Variable-length argument list in a portable way.

*** Declare a function that takes varying amounts of arguments
To declare a function whose argument number is not fixed (which may vary), we do:
#+begin_src c
void miniPrintf(char* format, ...)
#+end_src
the declaration ~...~ means that the number and types of these arguments may vary. It can only appear at the end of a list of named argument (there must be at least one named argument).

*** Traverse the argument list and final cleanup
The standard header ~<stdarg.h>~ contains a set of macro definitions that define how to step through an argument list. To build functions that takes varying amounts of arguments, you have to include ~<stdarg.h>~.

**** Type ~va_list~
A data type named ~va_list~ is defined in ~<stdarg.h>~. We declare a variable of this type, then use this variable to refer to each unnamed argument passed in the function. It works like a pointer. For example, we can have following declaration:
#+begin_src c
#include <stdarg.h>
void miniPrintf(char* format, ...) {
  va_list ap;  // points to each unnamed argument in turn
  va_start(ap, format);  // make ap point to 1st unnamed argument
  //...
}
#+end_src

**** Macro ~va_start~
After the declaration ~va_list ap;~, ~ap~ is an object of type ~va_list~. How to use it to actually point to the unnamed arguments? We begin by using a macro named ~va_start~. After declaring ~ap~, we call this macro to "initiate" ~ap~:
#+begin_src c
#include <stdarg.h>
void miniPrintf(char* format, ...) {
  va_list ap;  // points to each unnamed argument in turn
  va_start(ap, format);  // make ap point to 1st unnamed argument
  //...
}
#+end_src
~va_start()~ "accepts" two tokens. The first one is the ~va_list~ type variable which will be used to refer to unnamed arguments in turn, here we use ~ap~. The second one should be the *LAST* named argument from the function call. ~va_start~ will use this to locate the beginning of unnamed argument. After this line, ~ap~ will be referring to the first unnamed argument.

But how could we "retrieve" the unnamed argument being referred by ~ap~ and move to next argument? We call ~va_arg~ macro to do this job.

**** Macro ~va_arg~
~va_arg~ is a macro defined in ~<stdarg.h>~. It "accepts" two tokens, the first one is an object of ~va_list~ type (we used ~ap~), the second one is the type name you wish to collect from current argument which ~ap~ is appointing to. When this macro is called, it returns one argument of the type you specified and steps ~ap~ to the next. The type name you provided will be used by ~va_arg~ to determine what type to return and how big a step to take. You have to use another variable of the same type to hold the returned argument, so you can use later.

For example, following call of ~va_arg~ will return an integer argument, and we hold it using an integer variable named ~ival~:
#+begin_src c
int ival;
ival = va_arg(ap, int);
#+end_src

**** Macro ~va_end~
~va_end~ is a macro defined in ~<stdarg.h>~. It takes one token, which is the ~va_list~ object we used in the program. This macro will do whatever needs to cleanup. It must be called before the function returns:
#+begin_src c
va_end(ap);
#+end_src

*** Example: ~miniPrintf()~ <<mini_printf>>
In this example, ~miniPrintf()~ takes two arguments, the first one is a pointer to char, which will be the format string or content it will be printing. Every character of ~%~ indicates there is an argument in the argument list waiting to be printed in a certain format. Here, we just use the next character after ~%~ to determine what type of argument we retrieve from the argument list. The function is declared as:
#+begin_src c
#include <stdarg.h>
#include <stdio.h>
void miniPrintf(char* format, ...)
#+end_src
To retrieve arguments in the unamed argument list, we declare an object of type ~va_list~:
#+begin_src c
va_list ap;
char *p;  // to traverse format string
char* sval;  // to hold string argument
int ival;  // to hold integer argument
double dval;  // to hold double argument
#+end_src
Before processing, we need to initialize the ~va_list~ object:
#+begin_src c
va_start(ap, format);
#+end_src
Then, we go over the ~format~ string. If no ~%~ encountered, we call ~putchar()~ to print it directly:
#+begin_src c
for (p = format; *p; p++) {
  if (*p != '%') {
    putchar(*p);
    continue;
  }

  // do things when '%' is found
}
#+end_src
When ~%~ is found, we need to check the next character and determine what data type we need to retrieve from the unamed argument list:
#+begin_src c
for (p = format; *p; p++) {
  if (*p != '%') {
    putchar(*p);
    continue;
  }

  switch (*++p) {  // check next char
  case 'd':
    ival = va_arg(ap, int);
    printf("%d", ival);
    break;
  }
  case 'f':
    dval = va_arg(ap, double);
    printf("%f", dval);
    break;
  case 's':
    for (sval = va_arg(ap, char*); *sval; sval++)
      putchar(*sval);
    break;
  default:
    putchar(*p);
    break;
}
#+end_src
When the style token after ~%~ is ~s~, it means we have to print a string. So the return type of ~va_arg~ is a pointer to ~char~. We print the C-string one character by one character, until we reach the ~'\0'~ terminator.

** Formated Input: ~scanf()~
p171.

*** A simple example
An example of using ~scanf()~:
#+begin_src c
#include <stdio.h>

int main() {
  int a;
  int b;
  int c;
  int d;
  int num;
  scanf("%d%d%d%d", &a, &b, &c, &d);
  printf("a = %d\nb = %d\nc = %d\nd = %d\n", a, b, c, d);

  return 0;
}
#+end_src
here, we read four inputs and store them to four variables. Notice we have to pass in the address of each variable to ~scanf()~. In this way, ~scanf()~ can modify the variable directly (passed by value).

*** Declaration and arguments
~scanf()~ is declared as:
#+begin_src c
int scanf(char *format, ...)
#+end_src

It will use the ~format~ string to retrieve information via certain format, convert them and assign to variables in the followed list. ~scanf()~ stops when it exhausts its format string, or when some input fails to match the control specification. It returns the number of successfully matched and assigned input items (to variable in the unamed argument lists).

The ~format~ string may contain:
1. blanks or tabs. These will be automatically ignored
2. ordinary characters (not ~%~). ~scanf()~ will try to match these characters with the corresponding non-whitespace character of the input stream. For example:
   #+begin_src c
   scanf("%dabcde%d", &a, &b);
   printf("a = %d\nb = %d\n", a, b);
   #+end_src
   input: ~1abcde2~, output:
   #+BEGIN_EXAMPLE
   a = 1
   b = 2
   #+END_EXAMPLE
3. conversion specifications, which is explained below.

A conversion specification is some characters starting with ~%~, which will be used by ~scanf()~ to convert the next *input field* and assign to corresponding variable. An input field is defined as a string of non-white space characters; it extends either to the next white space character or until the field width has been reached (the width of the field may be specified by conversion specification, see below).

In the conversion specification, we may find:
- %: indicating starting of a conversion specification
- *: assignment suppresion marker. If this is present, the input field is skipped, no assignment to variable is made
- number: a number that specifies the maximum width of the input field (of which this current conversion specification is taking care)
- ~h, l or L~: indicating the width of the target. ~%h~: a short integer; ~%l~: a long integer.
- a conversion character: indicating what type to convert to, like ~%d, %c, %s~ etc. (i.e. the interpretation of the input field).

Some examples of using ~scanf()~ can be found on p172, 173.

** File Access<<file_access>>
*** Opening a file
The ~<stdio.h>~ library has a type ~FILE~ and a function ~fopen()~ that provides tools to work on files. The function ~fopen()~'s declaration is as follows:
#+begin_src c
FILE *fopen(char* name, char* mode)
#+end_src
It accepts the name of the file and mode for opening this file. It will return a pointer to a ~FILE~ object. The type ~FILE~ is defined with a ~typedef~, and is a structure that contains information about the file, such as:
- a pointer to a buffer
  - a buffer is used so file can be read in large chunks
- a count of the number of characters left in the buffer
- a pointer to the next character position in the buffer
- the file descriptor
- flags describing:
  - file openning mode: read or write
  - error states: if error has occurred
  - EOF states: whether end of file has occurred

To obtain a pointer to a file, we do:
#+begin_src c
FILE* fp;
fp = fopen(name, mode);
#+end_src
the allowable modes include:
- r: read mode
- w: write mode
- a: append mode
- b: append b to open in binary mode (for some systems)

When errors occurred during file opening, ~fopen()~ will return a ~NULL~.
*** Accessing the file
Once the file is opened, we access it through the ~FILE~ pointer ~fp~. We have following choices:
- ~char getc(FILE *fp)~: (maybe) a macro that accepts a ~FILE~ pointer, returns the next character from the file (character position is recorded inside the ~FILE~ object). It returns ~EOF~ for end of file or error.
- ~char putc(char c, FILE *fp)~: (maybe) a macro that accepts a character ~c~ and a ~FILE~ pointer. It will write ~c~ to the file and returns the character written, or returns ~EOF~ if an error occurs.

After using the file, we have to call ~fclose()~ to disconnect program from the file, freeing the file pointer for another file.

*** ~stdin~, ~stdout~ and ~stderr~
When a C program is started, the operating system environment is responsible for opening three files and providing file pointers for them to the program. These files are:
- standard input, file pointer: ~stdin~
- standard output, file pointer: ~stdout~
- standard error, file pointer: ~stderr~
These file pointers are declared in ~<stdio.h>~. Normally, ~stdin~ is connected to the keyboard, ~stdout~ and ~stderr~ are connected to the screen. ~stdin~ and ~stdout~ may be redirected to files or pipes as described earlier. Pay attention that ~stderr~ normally appears on the screen even if the standard output is redirected, this prevents error message disappearing down the pipeline. 

Since C programs use these three file pointers to communicate with outside components, when we get char from input, or print char on output, we are actually getting or printing these characters via these file pointers to the final destination (standard input, standard output and standard error). Thus, ~getchar()~ and ~putchar(c)~ can be defined in terms of ~getc, putc, stdin~ and ~stdout~ as:
#+begin_src c
#define getchar() getc(stdin)
#define putchar(c) putc((c), stdout)
#+end_src

*** Formatted input and output of files
To format input or output of files, we can use ~fscanf()~ and ~fprintf()~. These functions are similar with ~scanf()~ and ~printf()~, except the first argument is a file pointer. The declaration of these two functions are:
#+begin_src c
int fscanf(FILE *fp, char* format, ...)
int fprintf(FILE *fp, char* format, ...)
#+end_src

An example of sending formated error message to ~stderr~ is:
#+begin_src c
fprintf(stderr, "Error occurred!\n");
#+end_src
*** Example: replicate program ~cat~
p176: normal error handling

p177: advanced error handling (using ~stderr~ and ~exit()~)
*** Line input and output
The standard library provides an input routine ~fgets()~, which can reads the next input line (including ~'\n'~ character) from a ~FILE~ pointer to a char array. It will return a ~char~ pointer pointing to this char array. Its declaration is as follows:
#+begin_src c
char *fgets(char* line, int maxline, FILE *fp);
#+end_src
At most ~maxline - 1~ characters will be read. The resulting line is automatically terminated with ~'\0'~. When end of file reached or error occurred, it returns ~NULL~.

The standard library provides an output routine ~fputs()~, which can write a string (which need not contain a newline) to a file. The declaration is as follows:
#+begin_src c
int fputs(char* line, FILE *fp);
#+end_src
It returns ~EOF~ if an error occurs, and zero otherwise.

The library functions ~gets~ and ~puts~ are similar to ~fgets~ and ~fputs~, but operate on ~FILE~ pointers ~stdin~ and ~stdout~. ~gets~ deletes the terminal ~'\n'~, and ~puts~ adds it.
** MISC Functions
*** Storage Management
Two functions are used to obtain blocks of memory dynamically:
#+begin_src c
void* malloc(size_t n);
void* calloc(size_t n, size_t size);
#+end_src

~malloc()~ will return a pointer to ~n~ bytes of uninitialized storage, or ~NULL~ if the request cannot be satisfied.

~calloc()~ will return a pointer to enough space for an array of ~n~ objects of the specified size, or ~NULL~ if the request cannot be satisfied. The storage is initialized to zero.

The pointer returned by ~malloc()~ or ~calloc()~ has the proper alignment for the object requested (proper amount of memory), however, it must be case into the appropriate type before assigning to a pointer to hold. For example:
#+begin_src c
int* ip;
ip = (int*) calloc(n, sizeof(int));
#+end_src

To free the space pointed by a pointer ~p~, of which initially obtained by a call to ~malloc()~ or ~calloc()~, we can call ~free(p)~.
* The UNIX System Interface
** File Descriptors
In the UNIX operating system, all input and output is done by reading or writing files. All peripheral devices are abstracted as files in the file system. So, a single homogeneous interface handles all communication between a program and peripheral devices.

Consider an example of a C program that read content from, or write content to files on the system. Before you can do this, you must inform the system that you wish to *ACCESS* that particular file. The system will check your right to do so (does the file exist? do you have permission to access it?). If you have the access, the system will return a *small non-negative integer* called a /file descriptor/.

A file descriptor is a small non-negative integer, which is an abstract indicator (handle) used to access a file on the system (a file can be an actual file, a pipe, a network socket). All information about an open file is maintained by the system, the user program refers to the file only by the file descriptor.

As mentioned, the input/output are also abstracted as files on the system. If a program wants to access them, it must intend the system to check acceesbility and return the corresponding file descriptors to the program. However, since input/output are used so commonly, that when a program is called by the command interpreter (the "shell"), three files will be opened, their file descriptors ~0~, ~1~ and ~2~, will be returned to program so it can use it. By default, the three files are keyboard file (for input), monitor file and monitor file (for output and error display). In fact, the three file descriptors ~0~, ~1~ and ~2~, are used as ways for standard input, standard output and standard error of the program. The program don't have to worry about opening files to use them.

The user of a program can redirect I/O to and from files with ~<~ and ~>~ when typing the shell command. If these symbols are used, the default assignment of file descriptor ~0~ and ~1~ will be changed to the named files. For example:
#+BEGIN_EXAMPLE
$prog < text1.txt
#+END_EXAMPLE
In the above example, the ~text1.txt~ file will replace keyboard file as the standard input file, system will use file descriptor ~0~ to identify ~text1.txt~ and return file descriptor ~0~ to ~prog~. ~prog~ will use file descriptor ~0~ to get input.

Similarly, for standard output redirect:
#+BEGIN_EXAMPLE
$prog > result.txt
#+END_EXAMPLE
the ~result.txt~ file will replace monitor file as the standard output file, system will use file descriptor ~1~ to identify ~result.txt~ and return file descriptor ~1~ to ~prog~. ~prog~ will use file descriptor ~1~ to do output.

Pay attention that, the change of file assignments are done by the shell, not the program. For program, it always deal with file descriptor ~0~, ~1~ and ~2~. It does not know where is input coming from and where is output going to.
** Low Level I/O: ~read()~ and ~write()~
Input and output uses the ~read~ and ~write~ system calls. These two system calls are accessed from C programs through two functions called [[http://man7.org/linux/man-pages/man2/read.2.html][~read()~]] and [[http://man7.org/linux/man-pages/man2/write.2.html][~write()~]]. To use these two functions, you have to ~#include <unistd.h>~.
*** ~read()~
The function header for ~read()~ is:
#+begin_src c
ssize_t read(int fd, char *buf, size_t count)
#+end_src
*Parameters*

- ~fd~: file descriptor, referring the file you wish to read data from
- ~buf~: a pointer to a chunk of memory where the program store the data read from the file. Should be a pointer to a char or an array of char, since each char type is one byte. The data is read byte-by-byte.
- ~count~: amount of information you want to read from the file in one call of ~read()~, in bytes

*Behavior*

~read(fd, buf, count)~ attempts to read up to ~count~ bytes from the file referred to by the file descriptor ~fd~ into the buffer started at ~buf~.

*Return Value*

The return value of ~read()~ can be:
1. the number of bytes read from ~fd~. When ~fd~ doesn't have enough data, the returned value may be smaller than ~count~.
2. 0. This indicates end of file has been reached, nothing is read from ~fd~.
3. -1. This indicates error occurred.

Any number of bytes can be read in one call. The most common values are 1, which means one character at a time ("unbuffered"), or a number like 1024 or 4096 that corresponds to a physical block size on a peripheral device. Larger sizes will be more efficient because fewer system calls will be made.
*** ~write()~
The function header for ~write()~ is:
#+begin_src c
ssize_t write(int fd, char *buf, size_t count)
#+end_src

*Parameters*

- ~fd~: the file descriptor referring the file you want to write data to
- ~buf~: a pointer to a chunk of memory where the program store the data ready to be written to the file. Should be a pointer to a char or an array of char, since each char type is one byte. The data is read byte-by-byte.
- ~count~: amount of information you want to write to the file in one call of ~write()~, in bytes

*Behavior*

~write(fd, buf, count)~ writes up to ~count~ bytes from the buffer starting at ~buf~ to the file referred to by the file descriptor ~fd~.

*Return Value*

The return value of ~write()~ can be:
1. the number of bytes written to ~fd~. If this number is different from ~count~, it indicates an error has occurred, for example: there is insufficient space on the underlying physical medium. This can be used to do error checking.

Any number of bytes can be written in one call, as mentioned in ~read()~.
*** Example: copy input to output
This example will show the basic use of ~read()~ and ~write()~ function. In order to receive what we read from ~read()~, we need a buffer to hold it. We read data from ~fd~ to the buffer, and call ~write()~ to put the content in buffer to ~fd~. We repeat this process until the returned value of ~read()~ is not positive (0 or -1).

We'll use ~0~ as the file descriptor in ~read()~, since this is the standard input file descriptor. We'll use ~1~ as the file descriptor in ~write()~, since this is the standard output file descriptor. The code is as follows:
#+begin_src c
#include <unistd.h>

#define BUFSIZ 5
/* copy input to output */
int main() {
  char buf[BUFSIZ];
  int n;  // hold the number of bytes read
  
  while ((n = read(0, buf, BUFSIZ)) > 0)
    write(1, buf, n);
  
  return 0;
}
#+end_src
The buffer size is defined as 5. This means each system call we'll process 5 characters. But the reading will not stop unless 0 or -1 is returned by ~read()~. If file descriptor ~0~ is referring keyboard file (keyboard is the standard input), it will continue to read until the keyboard buffer is empty, then the program will wait until the user type other things (I guess these typed-in characters will first go to the keyboard buffer, then they will be read by program). For example, if we print the number of characters being read during each while loop, by adding ~printf("\n%d characters has been read.\n", n);~ into the while loop. Then we call the program (use default standard input), and input: ~12345678~, the result in console would be:
#+BEGIN_EXAMPLE
12345678
12345
5 characters has been read.
678

4 characters has been read.
#+END_EXAMPLE
Notice that each call of ~read()~ only read 5 characters.
*** Example: ~getchar()~
We can use ~read()~ to construct ~getchar()~, which is higher-level routine. First, let's compare the function header of these two functions:
#+begin_src c
ssize_t read(int fd, char *buf, size_t count)
char getchar(void)
#+end_src
Function ~getchar()~ has no parameter, it returns one character that is read from input stream. It does not require the user of ~getchar()~ bother the idea of file descriptor, buffer or the number of characters read. It conceals these details in its implementation so user can use it directly in the expected way. This is an example of using lower-level bricks to build higher level structures in the software architecture.

The implementation is simple:
#+begin_src c
#include <unistd.h>
#include <stdio.h>

char getcharacter(void) {
  char c;
  return ((read(0, &c, 1)) == 1) ? c : EOF;
}

int main() {
  char c;
  
  while ((c = getcharacter()) != EOF)
    printf("%c", c);
  return 0;
}
#+end_src
** ~open()~, ~creat()~, ~close()~, ~unlink()~
When a C program is invoked, only the three default files will be automatically opened and linked to the program (they are standard input, standard output and standard error files, refered by file descriptors ~0~, ~1~ and ~2~).

If you want to work with other files, you have to explicitly open other files in order to read or write them. In section [[file_access][File Access]], we mentioned a way of operating files by routines defined in ~<stdio.h>~. Here, we introduce low-level system calls to do this.

There are two system calls for file operation: ~open()~ and ~creat()~. To use them in your C program, you have to ~#include <fcntl.h>~.
*** ~open()~
**** Generals
The documentation for ~open()~ can be found [[http://man7.org/linux/man-pages/man2/open.2.html][here]].

The header of this system call is:
#+begin_src c
int open(char *name, int flags, int perms);
#+end_src
*Parameters*
- ~name~: the file name you want to open
- ~flags~: an ~int~ that specifies how the file is to be opened (constants are defined in ~<fcntl.h>~):
  - ~O_RDONLY~: open for read-only
  - ~O_WRONLY~: open for write-only
  - ~O_RDWR~: open for reading and writing
- ~perms~: (not mentioned in the book), it is always zero for the uses of ~open()~ that we will discuss)

Notice that when openning a file, the content of the file will not be deleted.
    
*Return value*

If successful, the return value of ~open()~ is a file descriptor, it will be the lowest-numbered file descriptor not currently open for the process. The file descriptor can be used by subsequent system calls, such as ~read()~, ~write()~.

If not successful, return -1.

**** Example: open a file for reading 
The code is as follows:
#+begin_src c
#include <fcntl.h>

int fd;  // to hold file descriptor
char name[] = "abc.txt";  // the file name
fd = open(name, O_RDONLY, 0)
#+end_src
*** ~creat()~
**** Generals
The documentation for ~creat()~ can be found [[https://linux.die.net/man/3/creat][here]].

The header of this system call is:
#+begin_src c
int creat(char *name, int perms);
#+end_src
*Parameters*
- ~name~: the file name to be created
- ~perms~: this integer specifies the permission of the file to be created. UNIX file system associates a small integer (with a length of 9-bits) with each file to specify the permission information of them. This integer controls different types of access by different users:
  - Access types:
    - read
    - write
    - execute
  - User types:
    - owner of the file
    - the owner's group
    - all others
  This is a 9-bit long integer, so we can use a 3-digit octal number for specifying the permissions. For example, ~0755~ (octal number for: ~1 1110 1101~) specifies read, write and execute permission for the owner; and read, execute permission for all others.


*Return value*

~creat()~ will return a file descriptor if it was able to creat the file. Otherwise, it will return -1.

If the file already exists, ~creat()~ will truncate it to zero length.
*** ~close()~
The function ~close(int fd)~ breaks the connection between a file descriptor and an open file, and frees the file descriptor for use with some other file.
*** ~unlink()~
The function ~unlink(char *name)~ removes the file ~name~ from the file system.

*** Example: mini ~cp~ program
This is a simple version of ~cp~ program. It copies one file to another. The file names are given as command line arguments. It will not copy the permission flag (the 3-digit octal number that describes the permission of the file), but invent a default permission of the copied file.

The behavior of the program is:
#+BEGIN_EXAMPLE
$ cp file_1 file_2
#+END_EXAMPLE
After typing the above line, a file named ~file_2~ will be created, with the same content as ~file_1~. 

How to copy? First, we have the file name from the command line argument (should be ~argv[1]~ and ~argv[2]~). We use system call ~open()~ to open the first file (the file being copied), and use system call ~creat()~ to create a file with name ~argv[2]~. We use two integer variable to hold the file descriptor returned by this two system calls. If no error occurred, we use ~read()~ system call to read content in ~file_1~ to our buffer, then use ~write()~ system call to write content in our buffer to the file. If there is any error occurred during the writing process (i.e. the returned value of ~write()~ is different from the intended value), we display error.

In this first version,we call ~printf()~ to display error message through standard output, and call ~exit(1)~ to exit the program. The code is as follows:
#+begin_src c
#include <stdio.h>   // for displaying error message
#include <stdlib.h>  // for exit() function
#include <unistd.h>  // for read(), write()
#include <fcntl.h>   // for open(), creat()
#define PERMS 0666   // default permission flag for copied file
                     // RW for owner, group, others
#define BUFFER 100   // buffer size for a single call of read()

/* cp: copy f1 to f2 */                    
int main(int argc, char *argv[]) {
  int fd1, fd2;  // hold two file descriptors
  int n;  // hold number of bytes read from file1
  char buf[BUFFER];

  // check number of command line arguments
  if (argc != 3) {
    printf("Usage: cp f1 f2");
    exit(1);
  }

  // oepn first file and create second file, exit if error occurred
  if ((fd1 = open(argv[1], O_RDONLY, 0)) == -1) {  // open failed
    printf("Error: can't open %s\n", argv[1]);
    exit(1);
  }

  if ((fd2 = creat(argv[2], PERMS)) == -1) {  // create failed
    printf("Error: can't create %s\n", argv[2]);
    exit(1);
  }

  // use read() and write() system to copy file
  while ((n = read(fd1, buf, BUFFER)) > 0)
    if (n != write(fd2, buf, n)) {  // check if write succeeded
      printf("Error: couldn't write on file %s\n", argv[2]);
      exit(1);
    }

  return 0;
}                    
#+end_src
*** Example: mini ~cp~ program with self-implemented ~error()~ display
Here, we implement a function called ~error()~ to combine following function calls:
1. ~printf("...", argv[...])~
2. ~exit(1)~

In short, it will display error information to standard error file, then call ~exit(1)~ to stop the program.

This is similar with the simple ~printf()~ function we built [[mini_printf][earlier]]. It is a function with variable-length argument lists. To process this kind of function, we ~#include <stdarg.h>~, and the header is:
#+begin_src c
void error(char *format, ...)
#+end_src
The three dots represents this function may have variable-length argument(s) after the named argument ~format~. To navigate each un-named argument, we declare a ~va_list~ type object and initialize it:
#+begin_src c
#include <stdarg.h>

void error(char *format, ...) {
  va_list args;
  va_start(args, format);
}
#+end_src

Then, we use ~fprintf()~ to print error message to ~stderr~ (this is a file pointer):
#+begin_src c
  fprintf(stderr, "error: ");
  vfprintf(stderr, format, args);
  fprintf(stderr, '\n');
#+end_src

Here, we use other version of ~fprintf()~ to print the argument related error message: ~vfprintf()~. Its header is as follows:
#+begin_src c
int vfprintf(FILE *fp, const char *format, va_list arg);
#+end_src

*Parameters*

- ~fp~: pointer to a ~FILE~ object that identifies an output stream
- ~format~: C string that contains a format string that follows the same specifications as in ~printf()~
- ~arg~ a variable of ~va_list~ type which has been initialized by calling the ~va_start~ macro.

*Return Value*

If succeed, the total number of characters written is returned.

*Behavior*

Writes the C string pointed by ~format~ to the file pointed by ~fp~, replacing any format specifier in the same way as ~printf()~ does, using the elements in the variable argument list identified by ~arg~, which is a ~va_list~ type object initialized by the ~va_start~ macro. So, we don't have to manually scan the ~format~ string and when a ~'%'~ is found, call ~va_arg()~ to retrieve the next argument in ~arg~ and print according to its type (check [[mini_printf][miniPrintf()]] for details of how this is done).

In another words, this function is like automatically extracting all arguments in ~arg~ and call:
#+begin_src c
fprintf(stderr, format, arg1, arg2, arg3);
#+end_src

After displaying error message, we call ~va_end()~ macro to end the argument retrieving. Then we call ~exit(1)~ to stop the program. The combined code is as follows:
#+begin_src c
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>  // for exit() function

void error(char *format, ...) {
  va_list args;  // for retrieving arguments
  va_start(args, format);  // initialize args

  // print error messages
  fprintf(stderr, "error: ");
  vfprintf(stderr, format, args);
  fprintf(stderr, "\n");

  // call exit() to stop the program
  exit(1);
}
#+end_src

Now ~error()~ has been defined, we call ~error()~ directly when an error occurred, instead of ~printf()~ and ~exit()~. The code is as follows:
#+begin_src c
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

#define PERMS 0666  // permission code: RW for owner, group, others
#define BUFFSIZE 100  // buffer size for read(), write()

void error(char *format, ...);

int main(int argc, char *argv[]) {
  int f1, f2, n;
  char buf[BUFFSIZE];

  // try to open files and display error message if failed
  if (argc != 3)  // check command line argument amount
    error("Usage: cp from to");
  if ((f1 = open(argv[1], O_RDONLY, 0)) == -1)
    error("cp: can't open %s", argv[1]);
  if ((f2 = creat(argv[2], PERMS)) == -1)
    error("cp: can't create %s, mode%03o", argv[2], PERMS);
    
  // copy
  while ((n = read(f1, buf, BUFFSIZE)) > 0)
    if (write(f2, buf, n) != n)
      error("cp: write error on file %s", argv[2]);

  return 0;
}
#+end_src
*** Exercise: mini ~cat~ program
This is exercise 8-1 in the textbook. The behavior of ~cat~ is:
- if no other file name provided as command line arguments, read from standard input and write to standard output file.
- if other file name provided as command line arguments, read from each file and write to standard output file.
- if error occured, use ~error()~ to print error message and stop the program

The code is as follows (with simple explanations)
#+begin_src c
#include <stdio.h>  // for stdin, stderr, stdout file pointers
#include <unistd.h>  // for read(), write()
#include <stdlib.h>  // for exit()
#include <stdarg.h>  // for variant-length argument function error()
#include <fcntl.h>  // for open() mode flags

#define BUFFSIZE 100

void error(char *format, ...);

int main(int argc, char *argv[]) {

  char buf[BUFFSIZE];  // buffer for read(), write()
  int n;  // count byte number
  int fd;  // to hold input file descriptor
  
  // check number of arguments
  if (argc == 1) {  // copy stdin to stdout
    while ((n = read(0, buf, BUFFSIZE)) > 0)
      if (n != write(1, buf, n))
        error("cat: write error to standard output");
    if (n == -1)
      error("cat: read error from standard input");
  } else {
    while (--argc > 0) {
      // try to open file
      if ((fd = open(*++argv, O_RDONLY, 0)) == -1)
        error("cat: can't open %s", *(argv));
      // write to file 
      while ((n = read(fd, buf, BUFFSIZE)) > 0)
        if (n != write(1, buf, n))
          error("cat: write error to standard output");
      if (n == -1)
        error("cat: read error from file %s", *(--argv));
      close(fd);  // free fd, so it is ready for next file 
    }
  }
  
  
  return 0;
}

void error(char *format, ...) {
  va_list args;
  va_start(args, format);
  
  fprintf(stderr, "Error: ");
  vfprintf(stderr, format, args);
  fprintf(stderr, "\n");
  
  va_end(args);
  exit(1);
}
#+end_src
** Random Access: ~lseek()~
The system call ~lseek()~ provides a way to move around in a file without reading or writing any data.
*** ~lseek()~
The header of ~lseek()~ is as follows:
#+begin_src c
long lseek(int fd, long offset, int origin);
#+end_src

*Parameters*

- ~fd~: the file descriptor which referring the file that are being worked with
- ~offset~: number of bytes that ~lseek()~ offsets the current position.
- ~origin~: the code for the position used as relative starting point to measure ~offset~. ~origin~ can have following values:
  - 0: ~offset~ is to be measured from the beginning
  - 1: ~offset~ is to be measured from the current position
  - 2: ~offset~ is to be measured from the end

*Return Value*

If no error occurred, returns a ~long~ that gives the new position in the file. Return -1 if an error occurs.

*Behavior*

After calling this function, the current working position of file referred by ~fd~ will be moved to the new position (affects system calls like ~read()~ and ~write()~). Pay attention that if position is beyond the range of the file, ~read()~ will have error, ~write()~ will add ~null~ between the end of file to the beginning of newly written content.
*** Examples
If we want to append data to the end of a file, we open a file in a mode that supports write, then call ~lseek(fd, 0L, 2)~, so the current working position will move to end of file.

To get back to beginning (~rewind()~), we just need to call ~lseek(fd, 0L, 0)~.
** Example: an implementation of ~fopen()~ and ~getc()~
 In this section we build a ~FILE~ type from scratch and implement ~fopen()~ and ~gect()~. We can use what we build to access files through ~FILE~ type, not the file descriptor (file descriptors are buried in the back stage).
 
*** ~FILE~ type build-up and Macros
Files in the standard library are described by file pointers rather than file descriptors. A file pointer is a pointer to a structure which is defined as a ~FILE~ type with a ~typedef~, it contains information about a file:
- a pointer to a buffer
  - a buffer is used so file can be read in large chunks
- a count of the number of characters left in the buffer
- a pointer to the next character position in the buffer
- the file descriptor
- flags describing:
  - file openning mode: read or write
  - error states: if error has occurred
  - EOF states: whether end of file has occurred

The code is as follows:
#+begin_src c
// named constants
#define NULL      0
#define EOF       (-1)
#define BUFSIZ    1024    //buffer size
#define OPEN_MAX  20      // max number of files open at once

typedef struct _iobuf {
  int cnt;           // characters left in the buffer
  char *ptr;         // next character position in the buffer
  char *base;        // location of buffer 
  int flag;          // store info bits (mode of file access and other status)
  int fd;            // file descriptor
} FILE;

FILE _iob[OPEN_MAX];       // an array of FILE type structures, each element is a FILE

// named constants
#define stdin  (&_iob[0])  // pointer to _iob[0]
#define stdout (&_iob[1])  // pointer to _iob[1]
#define stderr (&_iob[2])  // pointer to _iob[2]

/*Notes: 
In the FILE structure, we use only one integer flag to record the status bit, thus a single integer can record multiple status (each bit is a flag)
*/
enum _flags {     /* a leading zero on an integer constant means octal */
  _READ  = 01,    /* file open for reading */
  _WRITE = 02,    /* file open for writing */
  _UNBUF = 04,    /* file is unbuffered */
  _EOF   = 010,   /* EOF has occurred on this file */
  _ERR   = 020    /* error occurred on this file */
};

int _fillbuf(FILE *);         // function header
int _flushbuf(int, FILE *);   // function header

// macros with arguments, argument type should be pointer to FILE structure
#define feof(p) (((p)->flag & _EOF) != 0)       // when EOF has occurred, this is true
#define ferror(p) (((p)->flag & _ERR) != 0)     //when error occurred, this is true
#define fileno(p) ((p)->fd)                     // get the file descriptor

#define getc(p) (--(p)->cnt >= 0 ? (unsigned char) *(p)->ptr++ : _fillbuf(p))
#define putc(x,p) (--(p)->cnt >= 0 ? *(p)->ptr++ = (x) : _flushbuf((x), p))

#define getchar() getc(stdin)
#define putchar(x)  putc((x), stdout)
#+end_src


**** Setting flags

Notice that we have a member in ~FILE~ structure named ~flag~. This single integer is used to record various status of the ~FILE~ object. Each bit of the inter represents true/false of a specific status. We defined the status in the ~enum~ type:
#+begin_src c
enum _flags {     /* a leading zero on an integer constant means octal */
  _READ  = 01,    /* file open for reading */
  _WRITE = 02,    /* file open for writing */
  _UNBUF = 04,    /* file is unbuffered */
  _EOF   = 010,   /* EOF has occurred on this file */
  _ERR   = 020    /* error occurred on this file */
};
#+end_src

To make it clearer, we translate these octal number to binary to see which bit corresponds which information:
#+BEGIN_EXAMPLE
00001: read enabled
00010: write enabled
00100: file is unbuffered
01000: EOF reached
10000: error encountered
#+END_EXAMPLE
To check if ~flag~ has any of the above bit set, we just simplily use ~&~, as shown in macros ~feof()~, ~ferror()~, ~fileno()~.

**** Macro ~getc()~

In standard library, ~getc(p)~ accepts a pointer to a ~FILE~ object, returns the next character from the file.

In our implementation, to reduce the number of system calls, every required character was first looked in buffer. We first check if ~cnt~ is 0. This is an integer in ~FILE~ structure recording the number of remaining characters in the buffer. If this is zero, it means the buffer has gone empty. We call function ~_fillbuf(p)~ to fill the buffer (the buffer is filled by data retrieved from file via ~read()~ system call). If its not zero, we give the next character (pointed by ~ptr~ in ~FILE~ structure). The character returned is cast into ~unsigned char~ type to ensure that all characters will be positive.

Macro ~getchar()~ is also declared, by changing ~getc(p)~ to ~getc(stdin)~.

**** Macro ~putc()~

In standard library, ~putc(x,p)~ accepts a character ~x~ and a pointer ~p~ to a ~FILE~ object. It will write ~x~ to the file and returns the ~x~.

In our implementation, to reduce the number of system calls, every character that is intended to be written into file goes to buffer first (we add it to buffer). In this case, ~cnt~ represents the number of free slots in the buffer. First we check if the buffer is full or not. If it is not full (it can still hold additional characters), we push add the character to the position pointed by ~ptr~ and update ~ptr~'s position. If the buffer is already full, we call function ~_flushbuf((x), p)~ to flush the buffer (call ~write()~ to transfer characters in buffer to the file).

Macro ~putchar()~ is also declared, by changing ~putc(x,p)~ to ~putc((x), stdout)~.

*** ~fopen()~


* Place Holder
