\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{template} \PYG{o}{\PYGZlt{}}\PYG{k}{typename} \PYG{n}{T}\PYG{o}{\PYGZgt{}}
\PYG{k}{typename} \PYG{n}{List}\PYG{o}{\PYGZlt{}}\PYG{n}{T}\PYG{o}{\PYGZgt{}::}\PYG{n}{iterator} \PYG{n}{List}\PYG{o}{\PYGZlt{}}\PYG{n}{T}\PYG{o}{\PYGZgt{}::}\PYG{n}{insert}\PYG{p}{(}\PYG{n}{iterator} \PYG{n}{itr}\PYG{p}{,} \PYG{k}{const} \PYG{n}{T}\PYG{o}{\PYGZam{}} \PYG{n}{val}\PYG{p}{)} \PYG{p}{\PYGZob{}}
  \PYG{c+c1}{// update the size of the list}
  \PYG{n}{theSize}\PYG{o}{++}\PYG{p}{;}

  \PYG{c+c1}{// construct node}
  \PYG{n}{Node}\PYG{o}{*} \PYG{n}{p} \PYG{o}{=} \PYG{k}{new} \PYG{n}{Node}\PYG{p}{\PYGZob{}}\PYG{n}{val}\PYG{p}{,} \PYG{n}{itr}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{current}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{prev}\PYG{p}{,} \PYG{n}{itr}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{current}\PYG{p}{\PYGZcb{};}

  \PYG{c+c1}{// link the node back inti the list}
  \PYG{n}{itr}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{current}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{prev} \PYG{o}{=} \PYG{n}{p}\PYG{p}{;}
  \PYG{n}{p}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{prev}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{next} \PYG{o}{=} \PYG{n}{p}\PYG{p}{;}

  \PYG{c+c1}{// return an iterator pointing to the inserted element}
  \PYG{c+c1}{// notice that the constructor of iterator which accepts a pointer to a Node has been called implicitly to construct an iterator and return.}
  \PYG{k}{return} \PYG{n}{p}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
