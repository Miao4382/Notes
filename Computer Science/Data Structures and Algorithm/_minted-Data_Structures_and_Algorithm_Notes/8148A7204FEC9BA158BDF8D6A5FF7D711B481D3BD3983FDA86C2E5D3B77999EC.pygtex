\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{}pragma once}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}vector\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}list\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}algorithm\PYGZgt{} //for std::find()}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}functional\PYGZgt{} //for std::hash() function}

\PYG{k}{template} \PYG{o}{\PYGZlt{}}\PYG{k}{typename} \PYG{n}{HashedObj}\PYG{o}{\PYGZgt{}}
\PYG{k}{class} \PYG{n+nc}{HashTable} \PYG{p}{\PYGZob{}}
\PYG{k}{public}\PYG{o}{:}
  \PYG{c+c1}{//accepts an integer value, will build up a vector of that size, and initialize each entry an empty list (by calling the default constructor of list)}
  \PYG{k}{explicit} \PYG{n}{HashTable}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{size} \PYG{o}{=} \PYG{l+m+mi}{101}\PYG{p}{);}

  \PYG{k+kt}{bool} \PYG{n+nf}{contains}\PYG{p}{(}\PYG{k}{const} \PYG{n}{HashedObj}\PYG{o}{\PYGZam{}} \PYG{n}{x}\PYG{p}{)} \PYG{k}{const}\PYG{p}{;}

  \PYG{k+kt}{void} \PYG{n+nf}{makeEmpty}\PYG{p}{();}
  \PYG{k+kt}{bool} \PYG{n+nf}{insert}\PYG{p}{(}\PYG{k}{const} \PYG{n}{HashedObj}\PYG{o}{\PYGZam{}} \PYG{n}{x}\PYG{p}{);}
  \PYG{k+kt}{bool} \PYG{n+nf}{insert}\PYG{p}{(}\PYG{n}{HashedObj}\PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{x}\PYG{p}{);}
  \PYG{k+kt}{bool} \PYG{n+nf}{remove}\PYG{p}{(}\PYG{k}{const} \PYG{n}{HashedObj}\PYG{o}{\PYGZam{}} \PYG{n}{x}\PYG{p}{);}

\PYG{k}{private}\PYG{o}{:}
  \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{n}{std}\PYG{o}{::}\PYG{n}{list}\PYG{o}{\PYGZlt{}}\PYG{n}{HashedObj}\PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{theLists}\PYG{p}{;} \PYG{c+c1}{//array of lists}
  \PYG{k+kt}{int} \PYG{n}{currentSize}\PYG{p}{;} \PYG{c+c1}{// hold current number of items in array}

  \PYG{c+c1}{//void rehash();}
  \PYG{k+kt}{size\PYGZus{}t} \PYG{n+nf}{myhash}\PYG{p}{(}\PYG{k}{const} \PYG{n}{HashedObj}\PYG{o}{\PYGZam{}} \PYG{n}{x}\PYG{p}{)} \PYG{k}{const}\PYG{p}{;}
\PYG{p}{\PYGZcb{};}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}ht\PYGZus{}separate\PYGZus{}chain.hpp\PYGZdq{}}
\end{Verbatim}
